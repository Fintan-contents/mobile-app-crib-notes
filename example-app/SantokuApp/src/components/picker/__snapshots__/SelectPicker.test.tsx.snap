// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SelectPicker only with required props renders successfully if invisible: SelectPicker if invisible. 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  testID="pressableContainer"
>
  <View
    pointerEvents="box-only"
  >
    <TextInput
      editable={false}
      testID="textInput"
      value="test1"
    />
  </View>
</View>
`;

exports[`SelectPicker only with required props renders successfully if visible: SelectPicker if visible. 1`] = `
Array [
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    statusBarTranslucent={true}
    transparent={true}
    visible={true}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "bottom": 0,
          "display": "flex",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <View
        animatedStyle={
          Object {
            "value": Object {},
          }
        }
        collapsable={false}
        entering={
          FadeIn {
            "build": [Function],
            "callbackV": [Function],
            "durationV": 500,
            "randomizeDelay": false,
          }
        }
        exiting={
          FadeOut {
            "build": [Function],
            "callbackV": [Function],
            "durationV": 500,
            "randomizeDelay": false,
          }
        }
        style={
          Object {
            "backgroundColor": "rgba(0,0,0,0.4)",
            "flex": 1,
          }
        }
        testID="pickerBackdrop"
      />
    </View>
    <View
      pointerEvents="box-none"
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-end",
        }
      }
    >
      <View
        animatedStyle={
          Object {
            "value": Object {},
          }
        }
        collapsable={false}
      >
        <View
          animatedStyle={
            Object {
              "value": Object {},
            }
          }
          collapsable={false}
          entering={
            SlideInDown {
              "build": [Function],
              "callbackV": [Function],
              "durationV": 500,
              "randomizeDelay": false,
            }
          }
          exiting={
            SlideOutDown {
              "build": [Function],
              "callbackV": [Function],
              "durationV": 500,
              "randomizeDelay": false,
            }
          }
          pointerEvents="box-none"
          style={
            Object {
              "backgroundColor": "white",
            }
          }
          testID="pickerContainer"
        >
          <View
            style={
              Object {
                "flexDirection": "row",
                "justifyContent": "flex-end",
                "paddingHorizontal": 10,
                "paddingVertical": 8,
              }
            }
            testID="pickerAccessory"
          />
          <View
            testID="pickerItemsContainer"
          >
            <View>
              <RNCPicker
                items={
                  Array [
                    Object {
                      "label": "test1",
                      "testID": undefined,
                      "textColor": undefined,
                      "value": "1",
                    },
                    Object {
                      "label": "test2",
                      "testID": undefined,
                      "textColor": undefined,
                      "value": "2",
                    },
                  ]
                }
                numberOfLines={1}
                onChange={[Function]}
                selectedIndex={0}
                style={
                  Array [
                    Object {
                      "height": 216,
                    },
                    undefined,
                  ]
                }
              />
            </View>
          </View>
        </View>
      </View>
    </View>
  </Modal>,
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    testID="pressableContainer"
  >
    <View
      pointerEvents="box-only"
    >
      <TextInput
        editable={false}
        testID="textInput"
        value="test1"
      />
    </View>
  </View>,
]
`;

exports[`SelectPicker with all props should be applied all properly with custom xxx component: SelectPicker all properly with custom xxx component. 1`] = `
Array [
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    statusBarTranslucent={true}
    testID="modal"
    transparent={true}
    visible={true}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "bottom": 0,
          "display": "flex",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <View
        animatedStyle={
          Object {
            "value": Object {},
          }
        }
        collapsable={false}
        entering={
          FadeIn {
            "build": [Function],
            "callbackV": [Function],
            "durationV": 500,
            "randomizeDelay": false,
          }
        }
        exiting={
          FadeOut {
            "build": [Function],
            "callbackV": [Function],
            "durationV": 500,
            "randomizeDelay": false,
          }
        }
        style={
          Object {
            "backgroundColor": "green",
            "borderColor": "red",
            "flex": 1,
          }
        }
        testID="pickerBackdrop"
      />
    </View>
    <View
      pointerEvents="box-none"
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-end",
        }
      }
    >
      <View
        animatedStyle={
          Object {
            "value": Object {},
          }
        }
        collapsable={false}
      >
        <View
          animatedStyle={
            Object {
              "value": Object {},
            }
          }
          collapsable={false}
          entering={
            SlideInDown {
              "build": [Function],
              "callbackV": [Function],
              "durationV": 500,
              "randomizeDelay": false,
            }
          }
          exiting={
            SlideOutDown {
              "build": [Function],
              "callbackV": [Function],
              "durationV": 500,
              "randomizeDelay": false,
            }
          }
          pointerEvents="box-none"
          style={
            Object {
              "backgroundColor": "yellow",
              "borderColor": "black",
            }
          }
          testID="pickerContainer"
        >
          <View
            testID="customPickerAccessory"
          />
          <View
            pointerEvents="none"
            testID="pickerItemsContainer"
          >
            <View
              testID="customPicker"
            />
          </View>
        </View>
      </View>
    </View>
  </Modal>,
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    testID="pressableContainer"
  >
    <View
      pointerEvents="box-only"
    >
      <View
        testID="customTextInput"
      />
    </View>
  </View>,
]
`;

exports[`SelectPicker with all props should be applied all properly with default xxx component: SelectPicker all properly with default xxx component. 1`] = `
Array [
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    statusBarTranslucent={true}
    testID="modal"
    transparent={true}
    visible={true}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "bottom": 0,
          "display": "flex",
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <View
        animatedStyle={
          Object {
            "value": Object {},
          }
        }
        collapsable={false}
        entering={
          FadeIn {
            "build": [Function],
            "callbackV": [Function],
            "durationV": 500,
            "randomizeDelay": false,
          }
        }
        exiting={
          FadeOut {
            "build": [Function],
            "callbackV": [Function],
            "durationV": 500,
            "randomizeDelay": false,
          }
        }
        style={
          Object {
            "backgroundColor": "green",
            "borderColor": "red",
            "flex": 1,
          }
        }
        testID="pickerBackdrop"
      />
    </View>
    <View
      pointerEvents="box-none"
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-end",
        }
      }
    >
      <View
        animatedStyle={
          Object {
            "value": Object {},
          }
        }
        collapsable={false}
      >
        <View
          animatedStyle={
            Object {
              "value": Object {},
            }
          }
          collapsable={false}
          entering={
            SlideInDown {
              "build": [Function],
              "callbackV": [Function],
              "durationV": 500,
              "randomizeDelay": false,
            }
          }
          exiting={
            SlideOutDown {
              "build": [Function],
              "callbackV": [Function],
              "durationV": 500,
              "randomizeDelay": false,
            }
          }
          pointerEvents="box-none"
          style={
            Object {
              "backgroundColor": "yellow",
              "borderColor": "black",
            }
          }
          testID="pickerContainer"
        >
          <View
            style={
              Object {
                "backgroundColor": "blue",
                "flexDirection": "row",
                "justifyContent": "flex-end",
                "paddingHorizontal": 10,
                "paddingVertical": 8,
              }
            }
            testID="pickerAccessory"
          >
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "opacity": 1,
                }
              }
              testID="deleteLink"
            >
              <Text
                style={
                  Object {
                    "color": "#d9545e",
                    "fontWeight": "bold",
                    "paddingHorizontal": 10,
                  }
                }
              >
                delete
              </Text>
            </View>
            <View
              style={
                Object {
                  "flex": 1,
                }
              }
            />
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "opacity": 1,
                }
              }
              testID="cancelLink"
            >
              <Text
                style={
                  Object {
                    "color": "#4577CC",
                    "fontWeight": "bold",
                    "paddingHorizontal": 10,
                  }
                }
              >
                cancel
              </Text>
            </View>
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "opacity": 1,
                }
              }
              testID="doneLink"
            >
              <Text
                style={
                  Object {
                    "color": "#4577CC",
                    "fontWeight": "bold",
                    "paddingHorizontal": 10,
                  }
                }
              >
                done
              </Text>
            </View>
          </View>
          <View
            pointerEvents="none"
            testID="pickerItemsContainer"
          >
            <View>
              <RNCPicker
                items={
                  Array [
                    Object {
                      "label": "test1",
                      "testID": undefined,
                      "textColor": undefined,
                      "value": "1",
                    },
                    Object {
                      "label": "test2",
                      "testID": undefined,
                      "textColor": undefined,
                      "value": "2",
                    },
                  ]
                }
                numberOfLines={5}
                onChange={[Function]}
                selectedIndex={0}
                style={
                  Array [
                    Object {
                      "height": 216,
                    },
                    undefined,
                  ]
                }
                testID="picker"
              />
            </View>
          </View>
        </View>
      </View>
    </View>
  </Modal>,
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    testID="pressableContainer"
  >
    <View
      pointerEvents="box-only"
    >
      <TextInput
        editable={false}
        placeholder="please select..."
        style={
          Object {
            "color": "red",
          }
        }
        testID="textInput"
        value="test1"
      />
    </View>
  </View>,
]
`;
