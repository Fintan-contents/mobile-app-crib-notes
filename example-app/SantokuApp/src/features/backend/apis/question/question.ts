/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * SantokuApp REST API
 * SantokuApp„ÅÆREST API„ÄÇ
 * OpenAPI spec version: 1.0.0
 */
import {useQuery, useMutation} from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  Question,
  BadRequestResponse,
  GetListQuestionsParams,
  QuestionContent,
  QuestionRegistration,
  QuestionAndAnswer,
  AnswerContent,
  AnswerRegistration,
  CommentContent,
  CommentRegistration,
} from '.././model';
import {backendCustomInstance} from '../../utils/customInstance';
import type {ErrorType} from '../../utils/customInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Ë≥™Âïè„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇÊ§úÁ¥¢ÊñáË®Ä„ÇÑ„ÇΩ„Éº„ÉàÊù°‰ª∂„ÇíÊåáÂÆö„Åô„Çã„Å®Êù°‰ª∂„Å´Âêà„Å£„ÅüË≥™Âïè„ÅÆ„Åø„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ
 * @summary Ë≥™Âïè‰∏ÄË¶ßÂèñÂæó
 */
export const getListQuestions = (params?: GetListQuestionsParams, signal?: AbortSignal) => {
  return backendCustomInstance<Question[]>({url: `/questions`, method: 'get', params, signal});
};

export const getGetListQuestionsQueryKey = (params?: GetListQuestionsParams) =>
  [`/questions`, ...(params ? [params] : [])] as const;

export const getGetListQuestionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getListQuestions>>,
  TError = ErrorType<BadRequestResponse>,
>(
  params?: GetListQuestionsParams,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getListQuestions>>, TError, TData>},
): UseQueryOptions<Awaited<ReturnType<typeof getListQuestions>>, TError, TData> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetListQuestionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getListQuestions>>> = ({signal}) =>
    getListQuestions(params, signal);

  return {queryKey, queryFn, ...queryOptions};
};

export type GetListQuestionsQueryResult = NonNullable<Awaited<ReturnType<typeof getListQuestions>>>;
export type GetListQuestionsQueryError = ErrorType<BadRequestResponse>;

/**
 * @summary Ë≥™Âïè‰∏ÄË¶ßÂèñÂæó
 */
export const useGetListQuestions = <
  TData = Awaited<ReturnType<typeof getListQuestions>>,
  TError = ErrorType<BadRequestResponse>,
>(
  params?: GetListQuestionsParams,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getListQuestions>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getGetListQuestionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Ë≥™Âïè„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ
 * @summary Ë≥™ÂïèÁôªÈå≤
 */
export const postQuestions = (questionRegistration: QuestionRegistration) => {
  return backendCustomInstance<QuestionContent>({
    url: `/questions`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: questionRegistration,
  });
};

export const getPostQuestionsMutationOptions = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postQuestions>>,
    TError,
    {data: QuestionRegistration},
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof postQuestions>>, TError, {data: QuestionRegistration}, TContext> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postQuestions>>,
    {data: QuestionRegistration}
  > = props => {
    const {data} = props ?? {};

    return postQuestions(data);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostQuestionsMutationResult = NonNullable<Awaited<ReturnType<typeof postQuestions>>>;
export type PostQuestionsMutationBody = QuestionRegistration;
export type PostQuestionsMutationError = ErrorType<BadRequestResponse>;

/**
 * @summary Ë≥™ÂïèÁôªÈå≤
 */
export const usePostQuestions = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postQuestions>>,
    TError,
    {data: QuestionRegistration},
    TContext
  >;
}) => {
  const mutationOptions = getPostQuestionsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÁâπÂÆö„ÅÆË≥™Âïè„Åä„Çà„Å≥Á¥ê„Å•„ÅèÂõûÁ≠î„Å®„Ç≥„É°„É≥„Éà„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ
 * @summary Ë≥™ÂïèÂèñÂæó
 */
export const getDetailQuestion = (questionId: string, signal?: AbortSignal) => {
  return backendCustomInstance<QuestionAndAnswer>({url: `/questions/${questionId}`, method: 'get', signal});
};

export const getGetDetailQuestionQueryKey = (questionId: string) => [`/questions/${questionId}`] as const;

export const getGetDetailQuestionQueryOptions = <
  TData = Awaited<ReturnType<typeof getDetailQuestion>>,
  TError = ErrorType<unknown>,
>(
  questionId: string,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getDetailQuestion>>, TError, TData>},
): UseQueryOptions<Awaited<ReturnType<typeof getDetailQuestion>>, TError, TData> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDetailQuestionQueryKey(questionId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetailQuestion>>> = ({signal}) =>
    getDetailQuestion(questionId, signal);

  return {queryKey, queryFn, enabled: !!questionId, ...queryOptions};
};

export type GetDetailQuestionQueryResult = NonNullable<Awaited<ReturnType<typeof getDetailQuestion>>>;
export type GetDetailQuestionQueryError = ErrorType<unknown>;

/**
 * @summary Ë≥™ÂïèÂèñÂæó
 */
export const useGetDetailQuestion = <
  TData = Awaited<ReturnType<typeof getDetailQuestion>>,
  TError = ErrorType<unknown>,
>(
  questionId: string,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getDetailQuestion>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getGetDetailQuestionQueryOptions(questionId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * ÂõûÁ≠î„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ
 * @summary ÂõûÁ≠îÁôªÈå≤
 */
export const postQuestionsQuestionIdAnswers = (questionId: string, answerRegistration: AnswerRegistration) => {
  return backendCustomInstance<AnswerContent>({
    url: `/questions/${questionId}/answers`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: answerRegistration,
  });
};

export const getPostQuestionsQuestionIdAnswersMutationOptions = <
  TError = ErrorType<BadRequestResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postQuestionsQuestionIdAnswers>>,
    TError,
    {questionId: string; data: AnswerRegistration},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postQuestionsQuestionIdAnswers>>,
  TError,
  {questionId: string; data: AnswerRegistration},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postQuestionsQuestionIdAnswers>>,
    {questionId: string; data: AnswerRegistration}
  > = props => {
    const {questionId, data} = props ?? {};

    return postQuestionsQuestionIdAnswers(questionId, data);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostQuestionsQuestionIdAnswersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postQuestionsQuestionIdAnswers>>
>;
export type PostQuestionsQuestionIdAnswersMutationBody = AnswerRegistration;
export type PostQuestionsQuestionIdAnswersMutationError = ErrorType<BadRequestResponse>;

/**
 * @summary ÂõûÁ≠îÁôªÈå≤
 */
export const usePostQuestionsQuestionIdAnswers = <
  TError = ErrorType<BadRequestResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postQuestionsQuestionIdAnswers>>,
    TError,
    {questionId: string; data: AnswerRegistration},
    TContext
  >;
}) => {
  const mutationOptions = getPostQuestionsQuestionIdAnswersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Ë≥™Âïè„Å´ÂØæ„Åô„Çã„Ç≥„É°„É≥„Éà„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ
 * @summary „Ç≥„É°„É≥„ÉàÁôªÈå≤ÔºàË≥™ÂïèÔºâ
 */
export const postDetailComment = (questionId: string, commentRegistration: CommentRegistration) => {
  return backendCustomInstance<CommentContent>({
    url: `/questions/${questionId}/comments`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: commentRegistration,
  });
};

export const getPostDetailCommentMutationOptions = <
  TError = ErrorType<BadRequestResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDetailComment>>,
    TError,
    {questionId: string; data: CommentRegistration},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDetailComment>>,
  TError,
  {questionId: string; data: CommentRegistration},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDetailComment>>,
    {questionId: string; data: CommentRegistration}
  > = props => {
    const {questionId, data} = props ?? {};

    return postDetailComment(questionId, data);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostDetailCommentMutationResult = NonNullable<Awaited<ReturnType<typeof postDetailComment>>>;
export type PostDetailCommentMutationBody = CommentRegistration;
export type PostDetailCommentMutationError = ErrorType<BadRequestResponse>;

/**
 * @summary „Ç≥„É°„É≥„ÉàÁôªÈå≤ÔºàË≥™ÂïèÔºâ
 */
export const usePostDetailComment = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDetailComment>>,
    TError,
    {questionId: string; data: CommentRegistration},
    TContext
  >;
}) => {
  const mutationOptions = getPostDetailCommentMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÂõûÁ≠î„Å´ÂØæ„Åô„Çã„Ç≥„É°„É≥„Éà„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ
 * @summary „Ç≥„É°„É≥„ÉàÁôªÈå≤ÔºàÂõûÁ≠îÔºâ
 */
export const postQuestionsQuestionIdAnswersAnswerIdComments = (
  questionId: string,
  answerId: string,
  commentRegistration: CommentRegistration,
) => {
  return backendCustomInstance<CommentContent>({
    url: `/questions/${questionId}/answers/${answerId}/comments`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: commentRegistration,
  });
};

export const getPostQuestionsQuestionIdAnswersAnswerIdCommentsMutationOptions = <
  TError = ErrorType<BadRequestResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postQuestionsQuestionIdAnswersAnswerIdComments>>,
    TError,
    {questionId: string; answerId: string; data: CommentRegistration},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postQuestionsQuestionIdAnswersAnswerIdComments>>,
  TError,
  {questionId: string; answerId: string; data: CommentRegistration},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postQuestionsQuestionIdAnswersAnswerIdComments>>,
    {questionId: string; answerId: string; data: CommentRegistration}
  > = props => {
    const {questionId, answerId, data} = props ?? {};

    return postQuestionsQuestionIdAnswersAnswerIdComments(questionId, answerId, data);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostQuestionsQuestionIdAnswersAnswerIdCommentsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postQuestionsQuestionIdAnswersAnswerIdComments>>
>;
export type PostQuestionsQuestionIdAnswersAnswerIdCommentsMutationBody = CommentRegistration;
export type PostQuestionsQuestionIdAnswersAnswerIdCommentsMutationError = ErrorType<BadRequestResponse>;

/**
 * @summary „Ç≥„É°„É≥„ÉàÁôªÈå≤ÔºàÂõûÁ≠îÔºâ
 */
export const usePostQuestionsQuestionIdAnswersAnswerIdComments = <
  TError = ErrorType<BadRequestResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postQuestionsQuestionIdAnswersAnswerIdComments>>,
    TError,
    {questionId: string; answerId: string; data: CommentRegistration},
    TContext
  >;
}) => {
  const mutationOptions = getPostQuestionsQuestionIdAnswersAnswerIdCommentsMutationOptions(options);

  return useMutation(mutationOptions);
};
