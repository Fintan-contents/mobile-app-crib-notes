/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * SantokuApp REST API
 * SantokuApp„ÅÆREST API„ÄÇ
 * OpenAPI spec version: 1.0.0
 */
import {useQuery, useMutation} from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  Account,
  BadRequestResponse,
  AccountRegistration,
  AccountLoginResponse,
  UnauthorizedResponse,
  AccountLogin,
  ForbiddenResponse,
  AvatarImage,
  UpdateDeviceToken,
  TermsOfServiceAgreementStatus,
  AccountDeletion,
  LikesResponse,
  LikedEventResponse,
  LikedQuestionResponse,
} from '.././model';
import {backendCustomInstance} from '../../utils/customInstance';
import type {ErrorType} from '../../utils/customInstance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<{[Q in P]: T[P]}, {-readonly [Q in P]: T[P]}, P>;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object ? NonReadonly<NonNullable<T[P]>> : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * „Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÁôªÈå≤„Å´„ÅØ„ÄÅ„Éã„ÉÉ„ÇØ„Éç„Éº„É†„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ

 * @summary „Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÁôªÈå≤
 */
export const postSignup = (accountRegistration: AccountRegistration) => {
  return backendCustomInstance<Account>({
    url: `/signup`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: accountRegistration,
  });
};

export const getPostSignupMutationOptions = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSignup>>, TError, {data: AccountRegistration}, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postSignup>>, TError, {data: AccountRegistration}, TContext> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSignup>>, {data: AccountRegistration}> = props => {
    const {data} = props ?? {};

    return postSignup(data);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostSignupMutationResult = NonNullable<Awaited<ReturnType<typeof postSignup>>>;
export type PostSignupMutationBody = AccountRegistration;
export type PostSignupMutationError = ErrorType<BadRequestResponse>;

/**
 * @summary „Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÁôªÈå≤
 */
export const usePostSignup = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postSignup>>, TError, {data: AccountRegistration}, TContext>;
}) => {
  const mutationOptions = getPostSignupMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * „Ç¢„Ç´„Ç¶„É≥„ÉàID„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÊåáÂÆö„Åó„Å¶„É≠„Ç∞„Ç§„É≥„Åó„Åæ„Åô„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥„Åô„Çã
 */
export const postLogin = (accountLogin: AccountLogin) => {
  return backendCustomInstance<AccountLoginResponse>({
    url: `/login`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: accountLogin,
  });
};

export const getPostLoginMutationOptions = <
  TError = ErrorType<BadRequestResponse | UnauthorizedResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError, {data: AccountLogin}, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError, {data: AccountLogin}, TContext> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLogin>>, {data: AccountLogin}> = props => {
    const {data} = props ?? {};

    return postLogin(data);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postLogin>>>;
export type PostLoginMutationBody = AccountLogin;
export type PostLoginMutationError = ErrorType<BadRequestResponse | UnauthorizedResponse>;

/**
 * @summary „É≠„Ç∞„Ç§„É≥„Åô„Çã
 */
export const usePostLogin = <
  TError = ErrorType<BadRequestResponse | UnauthorizedResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postLogin>>, TError, {data: AccountLogin}, TContext>;
}) => {
  const mutationOptions = getPostLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * „É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åæ„Åô„ÄÇ
 * @summary „É≠„Ç∞„Ç¢„Ç¶„Éà„Åô„Çã
 */
export const postLogout = () => {
  return backendCustomInstance<void>({url: `/logout`, method: 'post'});
};

export const getPostLogoutMutationOptions = <
  TError = ErrorType<BadRequestResponse | ForbiddenResponse>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postLogout>>, TError, TVariables, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postLogout>>, TError, TVariables, TContext> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLogout>>, TVariables> = () => {
    return postLogout();
  };

  return {mutationFn, ...mutationOptions};
};

export type PostLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postLogout>>>;

export type PostLogoutMutationError = ErrorType<BadRequestResponse | ForbiddenResponse>;

/**
 * @summary „É≠„Ç∞„Ç¢„Ç¶„Éà„Åô„Çã
 */
export const usePostLogout = <
  TError = ErrorType<BadRequestResponse | ForbiddenResponse>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postLogout>>, TError, TVariables, TContext>;
}) => {
  const mutationOptions = getPostLogoutMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * „Ç¢„Ç´„Ç¶„É≥„ÉàID„Çí„Ç≠„Éº„Å®„Åó„Å¶ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Çã„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂèñÂæó„Åô„Çã„ÄÇ

 * @summary „Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂèñÂæó
 */
export const getAccountsAccountId = (accountId: string, signal?: AbortSignal) => {
  return backendCustomInstance<Account>({url: `/accounts/${accountId}`, method: 'get', signal});
};

export const getGetAccountsAccountIdQueryKey = (accountId: string) => [`/accounts/${accountId}`] as const;

export const getGetAccountsAccountIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountsAccountId>>,
  TError = ErrorType<unknown>,
>(
  accountId: string,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsAccountId>>, TError, TData>},
): UseQueryOptions<Awaited<ReturnType<typeof getAccountsAccountId>>, TError, TData> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsAccountIdQueryKey(accountId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccountsAccountId>>> = ({signal}) =>
    getAccountsAccountId(accountId, signal);

  return {queryKey, queryFn, enabled: !!accountId, ...queryOptions};
};

export type GetAccountsAccountIdQueryResult = NonNullable<Awaited<ReturnType<typeof getAccountsAccountId>>>;
export type GetAccountsAccountIdQueryError = ErrorType<unknown>;

/**
 * @summary „Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂèñÂæó
 */
export const useGetAccountsAccountId = <
  TData = Awaited<ReturnType<typeof getAccountsAccountId>>,
  TError = ErrorType<unknown>,
>(
  accountId: string,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsAccountId>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getGetAccountsAccountIdQueryOptions(accountId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * „Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã„ÄÇ
„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Çã„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅØ‰ª•‰∏ã„Å´„Å™„Çä„Åæ„Åô„ÄÇ
- png
- jpg
- jpeg
- bmp
- gif
- webp

 * @summary „Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã
 */
export const getAccountsAccountIdAvatar = (accountId: string, signal?: AbortSignal) => {
  return backendCustomInstance<AvatarImage>({url: `/accounts/${accountId}/avatar`, method: 'get', signal});
};

export const getGetAccountsAccountIdAvatarQueryKey = (accountId: string) => [`/accounts/${accountId}/avatar`] as const;

export const getGetAccountsAccountIdAvatarQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountsAccountIdAvatar>>,
  TError = ErrorType<unknown>,
>(
  accountId: string,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsAccountIdAvatar>>, TError, TData>},
): UseQueryOptions<Awaited<ReturnType<typeof getAccountsAccountIdAvatar>>, TError, TData> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsAccountIdAvatarQueryKey(accountId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccountsAccountIdAvatar>>> = ({signal}) =>
    getAccountsAccountIdAvatar(accountId, signal);

  return {queryKey, queryFn, enabled: !!accountId, ...queryOptions};
};

export type GetAccountsAccountIdAvatarQueryResult = NonNullable<Awaited<ReturnType<typeof getAccountsAccountIdAvatar>>>;
export type GetAccountsAccountIdAvatarQueryError = ErrorType<unknown>;

/**
 * @summary „Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã
 */
export const useGetAccountsAccountIdAvatar = <
  TData = Awaited<ReturnType<typeof getAccountsAccountIdAvatar>>,
  TError = ErrorType<unknown>,
>(
  accountId: string,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsAccountIdAvatar>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getGetAccountsAccountIdAvatarQueryOptions(accountId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„ÅÆ„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂèñÂæó„Åô„Çã„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂèñÂæó
 */
export const getAccountsMe = (signal?: AbortSignal) => {
  return backendCustomInstance<Account>({url: `/accounts/me`, method: 'get', signal});
};

export const getGetAccountsMeQueryKey = () => [`/accounts/me`] as const;

export const getGetAccountsMeQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountsMe>>,
  TError = ErrorType<ForbiddenResponse>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsMe>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getAccountsMe>>, TError, TData> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsMeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccountsMe>>> = ({signal}) => getAccountsMe(signal);

  return {queryKey, queryFn, ...queryOptions};
};

export type GetAccountsMeQueryResult = NonNullable<Awaited<ReturnType<typeof getAccountsMe>>>;
export type GetAccountsMeQueryError = ErrorType<ForbiddenResponse>;

/**
 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂèñÂæó
 */
export const useGetAccountsMe = <
  TData = Awaited<ReturnType<typeof getAccountsMe>>,
  TError = ErrorType<ForbiddenResponse>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsMe>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getGetAccountsMeQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã„ÄÇ
„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Çã„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅØ‰ª•‰∏ã„Å´„Å™„Çä„Åæ„Åô„ÄÇ
- png
- jpg
- jpeg
- bmp
- gif
- webp

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã
 */
export const getAccountsMeAvatar = (signal?: AbortSignal) => {
  return backendCustomInstance<AvatarImage>({url: `/accounts/me/avatar`, method: 'get', signal});
};

export const getGetAccountsMeAvatarQueryKey = () => [`/accounts/me/avatar`] as const;

export const getGetAccountsMeAvatarQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountsMeAvatar>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeAvatar>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeAvatar>>, TError, TData> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsMeAvatarQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccountsMeAvatar>>> = ({signal}) =>
    getAccountsMeAvatar(signal);

  return {queryKey, queryFn, ...queryOptions};
};

export type GetAccountsMeAvatarQueryResult = NonNullable<Awaited<ReturnType<typeof getAccountsMeAvatar>>>;
export type GetAccountsMeAvatarQueryError = ErrorType<unknown>;

/**
 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÂèñÂæó„Åô„Çã
 */
export const useGetAccountsMeAvatar = <
  TData = Awaited<ReturnType<typeof getAccountsMeAvatar>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeAvatar>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getGetAccountsMeAvatarQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÁôªÈå≤„Åô„Çã„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÁôªÈå≤„Åô„Çã
 */
export const putAccountsMeAvatar = (avatarImage: AvatarImage) => {
  const formData = new FormData();
  if (avatarImage.avatarImage !== undefined) {
    formData.append('avatarImage', avatarImage.avatarImage);
  }

  return backendCustomInstance<void>({
    url: `/accounts/me/avatar`,
    method: 'put',
    headers: {'Content-Type': 'multipart/form-data'},
    data: formData,
  });
};

export const getPutAccountsMeAvatarMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putAccountsMeAvatar>>, TError, {data: AvatarImage}, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof putAccountsMeAvatar>>, TError, {data: AvatarImage}, TContext> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAccountsMeAvatar>>, {data: AvatarImage}> = props => {
    const {data} = props ?? {};

    return putAccountsMeAvatar(data);
  };

  return {mutationFn, ...mutationOptions};
};

export type PutAccountsMeAvatarMutationResult = NonNullable<Awaited<ReturnType<typeof putAccountsMeAvatar>>>;
export type PutAccountsMeAvatarMutationBody = AvatarImage;
export type PutAccountsMeAvatarMutationError = ErrorType<unknown>;

/**
 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÁôªÈå≤„Åô„Çã
 */
export const usePutAccountsMeAvatar = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putAccountsMeAvatar>>, TError, {data: AvatarImage}, TContext>;
}) => {
  const mutationOptions = getPutAccountsMeAvatarMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Éá„Éê„Ç§„ÇπÁôªÈå≤„Éà„Éº„ÇØ„É≥„ÇíÊõ¥Êñ∞„Åô„Çã„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Éá„Éê„Ç§„ÇπÁôªÈå≤„Éà„Éº„ÇØ„É≥„ÅÆÊõ¥Êñ∞
 */
export const postAccountsMeDeviceToken = (updateDeviceToken: UpdateDeviceToken) => {
  return backendCustomInstance<void>({
    url: `/accounts/me/device-token`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: updateDeviceToken,
  });
};

export const getPostAccountsMeDeviceTokenMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAccountsMeDeviceToken>>,
    TError,
    {data: UpdateDeviceToken},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAccountsMeDeviceToken>>,
  TError,
  {data: UpdateDeviceToken},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAccountsMeDeviceToken>>,
    {data: UpdateDeviceToken}
  > = props => {
    const {data} = props ?? {};

    return postAccountsMeDeviceToken(data);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostAccountsMeDeviceTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAccountsMeDeviceToken>>
>;
export type PostAccountsMeDeviceTokenMutationBody = UpdateDeviceToken;
export type PostAccountsMeDeviceTokenMutationError = ErrorType<unknown>;

/**
 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆ„Éá„Éê„Ç§„ÇπÁôªÈå≤„Éà„Éº„ÇØ„É≥„ÅÆÊõ¥Êñ∞
 */
export const usePostAccountsMeDeviceToken = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAccountsMeDeviceToken>>,
    TError,
    {data: UpdateDeviceToken},
    TContext
  >;
}) => {
  const mutationOptions = getPostAccountsMeDeviceTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÊúâÂäπ„Å™Âà©Áî®Ë¶èÁ¥Ñ„Å´ÂêåÊÑè„Åó„Å¶„ÅÑ„Çã„Åã„ÅÆÁä∂ÊÖã„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂà©Áî®Ë¶èÁ¥ÑÂêåÊÑèÁä∂ÊÖãÁ¢∫Ë™ç
 */
export const getAccountsMeTerms = (signal?: AbortSignal) => {
  return backendCustomInstance<TermsOfServiceAgreementStatus>({url: `/accounts/me/terms`, method: 'get', signal});
};

export const getGetAccountsMeTermsQueryKey = () => [`/accounts/me/terms`] as const;

export const getGetAccountsMeTermsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountsMeTerms>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeTerms>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeTerms>>, TError, TData> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsMeTermsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccountsMeTerms>>> = ({signal}) =>
    getAccountsMeTerms(signal);

  return {queryKey, queryFn, ...queryOptions};
};

export type GetAccountsMeTermsQueryResult = NonNullable<Awaited<ReturnType<typeof getAccountsMeTerms>>>;
export type GetAccountsMeTermsQueryError = ErrorType<unknown>;

/**
 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂà©Áî®Ë¶èÁ¥ÑÂêåÊÑèÁä∂ÊÖãÁ¢∫Ë™ç
 */
export const useGetAccountsMeTerms = <
  TData = Awaited<ReturnType<typeof getAccountsMeTerms>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeTerms>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getGetAccountsMeTermsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„Å´„Åä„ÅÑ„Å¶„ÄÅÊåáÂÆö„Åï„Çå„ÅüÂà©Áî®Ë¶èÁ¥Ñ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„Å´ÂêåÊÑè„Åó„Åæ„Åô„ÄÇ

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂà©Áî®Ë¶èÁ¥ÑÂêåÊÑè
 */
export const postAccountsMeTerms = (termsOfServiceAgreementStatus: NonReadonly<TermsOfServiceAgreementStatus>) => {
  return backendCustomInstance<TermsOfServiceAgreementStatus>({
    url: `/accounts/me/terms`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: termsOfServiceAgreementStatus,
  });
};

export const getPostAccountsMeTermsMutationOptions = <
  TError = ErrorType<BadRequestResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAccountsMeTerms>>,
    TError,
    {data: NonReadonly<TermsOfServiceAgreementStatus>},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAccountsMeTerms>>,
  TError,
  {data: NonReadonly<TermsOfServiceAgreementStatus>},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAccountsMeTerms>>,
    {data: NonReadonly<TermsOfServiceAgreementStatus>}
  > = props => {
    const {data} = props ?? {};

    return postAccountsMeTerms(data);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostAccountsMeTermsMutationResult = NonNullable<Awaited<ReturnType<typeof postAccountsMeTerms>>>;
export type PostAccountsMeTermsMutationBody = NonReadonly<TermsOfServiceAgreementStatus>;
export type PostAccountsMeTermsMutationError = ErrorType<BadRequestResponse>;

/**
 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂà©Áî®Ë¶èÁ¥ÑÂêåÊÑè
 */
export const usePostAccountsMeTerms = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAccountsMeTerms>>,
    TError,
    {data: NonReadonly<TermsOfServiceAgreementStatus>},
    TContext
  >;
}) => {
  const mutationOptions = getPostAccountsMeTermsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô„ÄÇ

„Ç¢„Ç´„Ç¶„É≥„Éà„ÅÆÂâäÈô§„Å´„Éë„Çπ„ÉØ„Éº„Éâ„ÇíË¶ÅÊ±Ç„Åô„Çã„ÅÆ„Åß„ÄÅDELETE„É°„ÇΩ„ÉÉ„Éâ„Åß„ÅØ„Å™„ÅèPOST„É°„ÇΩ„ÉÉ„Éâ„ÇíÂà©Áî®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ

ÂèÇËÄÉ: [4.3.5. DELETE - RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.5)

> A payload within a DELETE request message has no defined semantics;
> sending a payload body on a DELETE request might cause some existing
> implementations to reject the request.

 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„ÉàÂâäÈô§
 */
export const deleteAccountsMeDelete = (accountDeletion: AccountDeletion) => {
  return backendCustomInstance<void>({
    url: `/accounts/me/delete`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: accountDeletion,
  });
};

export const getDeleteAccountsMeDeleteMutationOptions = <
  TError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAccountsMeDelete>>,
    TError,
    {data: AccountDeletion},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteAccountsMeDelete>>,
  TError,
  {data: AccountDeletion},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteAccountsMeDelete>>,
    {data: AccountDeletion}
  > = props => {
    const {data} = props ?? {};

    return deleteAccountsMeDelete(data);
  };

  return {mutationFn, ...mutationOptions};
};

export type DeleteAccountsMeDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAccountsMeDelete>>>;
export type DeleteAccountsMeDeleteMutationBody = AccountDeletion;
export type DeleteAccountsMeDeleteMutationError = ErrorType<
  BadRequestResponse | UnauthorizedResponse | ForbiddenResponse
>;

/**
 * @summary „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„Ç¢„Ç´„Ç¶„É≥„ÉàÂâäÈô§
 */
export const useDeleteAccountsMeDelete = <
  TError = ErrorType<BadRequestResponse | UnauthorizedResponse | ForbiddenResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAccountsMeDelete>>,
    TError,
    {data: AccountDeletion},
    TContext
  >;
}) => {
  const mutationOptions = getDeleteAccountsMeDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * „ÅÑ„ÅÑ„Å≠Ê∏à„ÅÆ„Ç§„Éô„É≥„Éà„ÄÅË≥™Âïè„ÄÅÂõûÁ≠î„ÄÅ„Ç≥„É°„É≥„Éà„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ
 * @summary „ÅÑ„ÅÑ„Å≠Ê∏à„ÅÆÂèñÂæó
 */
export const getAccountsMeLikes = (signal?: AbortSignal) => {
  return backendCustomInstance<LikesResponse>({url: `/accounts/me/likes`, method: 'get', signal});
};

export const getGetAccountsMeLikesQueryKey = () => [`/accounts/me/likes`] as const;

export const getGetAccountsMeLikesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountsMeLikes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeLikes>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeLikes>>, TError, TData> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsMeLikesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccountsMeLikes>>> = ({signal}) =>
    getAccountsMeLikes(signal);

  return {queryKey, queryFn, ...queryOptions};
};

export type GetAccountsMeLikesQueryResult = NonNullable<Awaited<ReturnType<typeof getAccountsMeLikes>>>;
export type GetAccountsMeLikesQueryError = ErrorType<unknown>;

/**
 * @summary „ÅÑ„ÅÑ„Å≠Ê∏à„ÅÆÂèñÂæó
 */
export const useGetAccountsMeLikes = <
  TData = Awaited<ReturnType<typeof getAccountsMeLikes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeLikes>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getGetAccountsMeLikesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * „Ç§„Éô„É≥„Éà„Å´ÂØæ„Åô„Çã„ÅÑ„ÅÑ„Å≠„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂÆüÊñΩÔºà„Ç§„Éô„É≥„ÉàÔºâ
 */
export const putEventsEventIdLike = (eventId: string) => {
  return backendCustomInstance<void>({url: `/accounts/me/likes/events/${eventId}`, method: 'put'});
};

export const getPutEventsEventIdLikeMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putEventsEventIdLike>>, TError, {eventId: string}, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof putEventsEventIdLike>>, TError, {eventId: string}, TContext> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof putEventsEventIdLike>>, {eventId: string}> = props => {
    const {eventId} = props ?? {};

    return putEventsEventIdLike(eventId);
  };

  return {mutationFn, ...mutationOptions};
};

export type PutEventsEventIdLikeMutationResult = NonNullable<Awaited<ReturnType<typeof putEventsEventIdLike>>>;

export type PutEventsEventIdLikeMutationError = ErrorType<unknown>;

/**
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂÆüÊñΩÔºà„Ç§„Éô„É≥„ÉàÔºâ
 */
export const usePutEventsEventIdLike = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof putEventsEventIdLike>>, TError, {eventId: string}, TContext>;
}) => {
  const mutationOptions = getPutEventsEventIdLikeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * „Ç§„Éô„É≥„Éà„Å´ÂØæ„Åô„Çã„ÅÑ„ÅÑ„Å≠„ÇíÂèñ„ÇäÊ∂à„Åó„Åæ„Åô„ÄÇ
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂèñÊ∂àÔºà„Ç§„Éô„É≥„ÉàÔºâ
 */
export const deleteEventsEventIdLike = (eventId: string) => {
  return backendCustomInstance<void>({url: `/accounts/me/likes/events/${eventId}`, method: 'delete'});
};

export const getDeleteEventsEventIdLikeMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEventsEventIdLike>>,
    TError,
    {eventId: string},
    TContext
  >;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteEventsEventIdLike>>, TError, {eventId: string}, TContext> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteEventsEventIdLike>>,
    {eventId: string}
  > = props => {
    const {eventId} = props ?? {};

    return deleteEventsEventIdLike(eventId);
  };

  return {mutationFn, ...mutationOptions};
};

export type DeleteEventsEventIdLikeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteEventsEventIdLike>>>;

export type DeleteEventsEventIdLikeMutationError = ErrorType<unknown>;

/**
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂèñÊ∂àÔºà„Ç§„Éô„É≥„ÉàÔºâ
 */
export const useDeleteEventsEventIdLike = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteEventsEventIdLike>>,
    TError,
    {eventId: string},
    TContext
  >;
}) => {
  const mutationOptions = getDeleteEventsEventIdLikeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÁâπÂÆö„ÅÆ„Ç§„Éô„É≥„Éà„Å´„Å§„ÅÑ„Å¶„ÅÑ„ÅÑ„Å≠Ê∏à„ÅÆ„Ç§„Éô„É≥„Éà„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ„ÅÑ„ÅÑ„Å≠Ê∏à„ÅÆÂ†¥Âêà„ÅØ„Ç§„Éô„É≥„ÉàID„ÅåËøî„Çä„Åæ„Åô„ÄÇ
 * @summary „ÅÑ„ÅÑ„Å≠Ê∏à„ÅÆÂèñÂæóÔºà„Ç§„Éô„É≥„ÉàÔºâ
 */
export const getAccountsMeLikesEventsEventId = (eventId: string, signal?: AbortSignal) => {
  return backendCustomInstance<LikedEventResponse>({
    url: `/accounts/me/likes/events/${eventId}`,
    method: 'get',
    signal,
  });
};

export const getGetAccountsMeLikesEventsEventIdQueryKey = (eventId: string) =>
  [`/accounts/me/likes/events/${eventId}`] as const;

export const getGetAccountsMeLikesEventsEventIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountsMeLikesEventsEventId>>,
  TError = ErrorType<unknown>,
>(
  eventId: string,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeLikesEventsEventId>>, TError, TData>},
): UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeLikesEventsEventId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsMeLikesEventsEventIdQueryKey(eventId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccountsMeLikesEventsEventId>>> = ({signal}) =>
    getAccountsMeLikesEventsEventId(eventId, signal);

  return {queryKey, queryFn, enabled: !!eventId, ...queryOptions};
};

export type GetAccountsMeLikesEventsEventIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccountsMeLikesEventsEventId>>
>;
export type GetAccountsMeLikesEventsEventIdQueryError = ErrorType<unknown>;

/**
 * @summary „ÅÑ„ÅÑ„Å≠Ê∏à„ÅÆÂèñÂæóÔºà„Ç§„Éô„É≥„ÉàÔºâ
 */
export const useGetAccountsMeLikesEventsEventId = <
  TData = Awaited<ReturnType<typeof getAccountsMeLikesEventsEventId>>,
  TError = ErrorType<unknown>,
>(
  eventId: string,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeLikesEventsEventId>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getGetAccountsMeLikesEventsEventIdQueryOptions(eventId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Ë≥™Âïè„Å´ÂØæ„Åô„Çã„ÅÑ„ÅÑ„Å≠„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂÆüÊñΩÔºàË≥™ÂïèÔºâ
 */
export const putQuestionsQuestionIdLike = (questionId: string) => {
  return backendCustomInstance<void>({url: `/accounts/me/likes/questions/${questionId}`, method: 'put'});
};

export const getPutQuestionsQuestionIdLikeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putQuestionsQuestionIdLike>>,
    TError,
    {questionId: string},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putQuestionsQuestionIdLike>>,
  TError,
  {questionId: string},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putQuestionsQuestionIdLike>>,
    {questionId: string}
  > = props => {
    const {questionId} = props ?? {};

    return putQuestionsQuestionIdLike(questionId);
  };

  return {mutationFn, ...mutationOptions};
};

export type PutQuestionsQuestionIdLikeMutationResult = NonNullable<
  Awaited<ReturnType<typeof putQuestionsQuestionIdLike>>
>;

export type PutQuestionsQuestionIdLikeMutationError = ErrorType<unknown>;

/**
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂÆüÊñΩÔºàË≥™ÂïèÔºâ
 */
export const usePutQuestionsQuestionIdLike = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putQuestionsQuestionIdLike>>,
    TError,
    {questionId: string},
    TContext
  >;
}) => {
  const mutationOptions = getPutQuestionsQuestionIdLikeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Ë≥™Âïè„Å´ÂØæ„Åô„Çã„ÅÑ„ÅÑ„Å≠„ÇíÂèñ„ÇäÊ∂à„Åó„Åæ„Åô„ÄÇ
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂèñÊ∂àÔºàË≥™ÂïèÔºâ
 */
export const deleteQuestionsQuestionIdLike = (questionId: string) => {
  return backendCustomInstance<void>({url: `/accounts/me/likes/questions/${questionId}`, method: 'delete'});
};

export const getDeleteQuestionsQuestionIdLikeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteQuestionsQuestionIdLike>>,
    TError,
    {questionId: string},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteQuestionsQuestionIdLike>>,
  TError,
  {questionId: string},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteQuestionsQuestionIdLike>>,
    {questionId: string}
  > = props => {
    const {questionId} = props ?? {};

    return deleteQuestionsQuestionIdLike(questionId);
  };

  return {mutationFn, ...mutationOptions};
};

export type DeleteQuestionsQuestionIdLikeMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteQuestionsQuestionIdLike>>
>;

export type DeleteQuestionsQuestionIdLikeMutationError = ErrorType<unknown>;

/**
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂèñÊ∂àÔºàË≥™ÂïèÔºâ
 */
export const useDeleteQuestionsQuestionIdLike = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteQuestionsQuestionIdLike>>,
    TError,
    {questionId: string},
    TContext
  >;
}) => {
  const mutationOptions = getDeleteQuestionsQuestionIdLikeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÁâπÂÆö„ÅÆË≥™Âïè„Å´„Å§„ÅÑ„Å¶„ÅÑ„ÅÑ„Å≠Ê∏à„ÅÆË≥™Âïè„Åä„Çà„Å≥Á¥ê„Å•„ÅèÂõûÁ≠î„ÄÅ„Ç≥„É°„É≥„Éà„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ„ÅÑ„ÅÑ„Å≠Ê∏à„ÅÆÂ†¥Âêà„ÅØID„ÅåËøî„Çä„Åæ„Åô„ÄÇ
 * @summary „ÅÑ„ÅÑ„Å≠Ê∏à„ÅÆÂèñÂæóÔºàË≥™ÂïèÔºâ
 */
export const getAccountsMeLikesQuestionsQuestionId = (questionId: string, signal?: AbortSignal) => {
  return backendCustomInstance<LikedQuestionResponse>({
    url: `/accounts/me/likes/questions/${questionId}`,
    method: 'get',
    signal,
  });
};

export const getGetAccountsMeLikesQuestionsQuestionIdQueryKey = (questionId: string) =>
  [`/accounts/me/likes/questions/${questionId}`] as const;

export const getGetAccountsMeLikesQuestionsQuestionIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountsMeLikesQuestionsQuestionId>>,
  TError = ErrorType<unknown>,
>(
  questionId: string,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeLikesQuestionsQuestionId>>, TError, TData>},
): UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeLikesQuestionsQuestionId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsMeLikesQuestionsQuestionIdQueryKey(questionId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccountsMeLikesQuestionsQuestionId>>> = ({signal}) =>
    getAccountsMeLikesQuestionsQuestionId(questionId, signal);

  return {queryKey, queryFn, enabled: !!questionId, ...queryOptions};
};

export type GetAccountsMeLikesQuestionsQuestionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccountsMeLikesQuestionsQuestionId>>
>;
export type GetAccountsMeLikesQuestionsQuestionIdQueryError = ErrorType<unknown>;

/**
 * @summary „ÅÑ„ÅÑ„Å≠Ê∏à„ÅÆÂèñÂæóÔºàË≥™ÂïèÔºâ
 */
export const useGetAccountsMeLikesQuestionsQuestionId = <
  TData = Awaited<ReturnType<typeof getAccountsMeLikesQuestionsQuestionId>>,
  TError = ErrorType<unknown>,
>(
  questionId: string,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getAccountsMeLikesQuestionsQuestionId>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getGetAccountsMeLikesQuestionsQuestionIdQueryOptions(questionId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Ë≥™Âïè„ÅÆ„Ç≥„É°„É≥„Éà„Å´ÂØæ„Åô„Çã„ÅÑ„ÅÑ„Å≠„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂÆüÊñΩÔºàË≥™Âïè„Ç≥„É°„É≥„ÉàÔºâ
 */
export const putQuestionsQuestionIdCommentCommentIdLike = (questionId: string, commentId: string) => {
  return backendCustomInstance<void>({
    url: `/accounts/me/likes/questions/${questionId}/comments/${commentId}`,
    method: 'put',
  });
};

export const getPutQuestionsQuestionIdCommentCommentIdLikeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putQuestionsQuestionIdCommentCommentIdLike>>,
    TError,
    {questionId: string; commentId: string},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putQuestionsQuestionIdCommentCommentIdLike>>,
  TError,
  {questionId: string; commentId: string},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putQuestionsQuestionIdCommentCommentIdLike>>,
    {questionId: string; commentId: string}
  > = props => {
    const {questionId, commentId} = props ?? {};

    return putQuestionsQuestionIdCommentCommentIdLike(questionId, commentId);
  };

  return {mutationFn, ...mutationOptions};
};

export type PutQuestionsQuestionIdCommentCommentIdLikeMutationResult = NonNullable<
  Awaited<ReturnType<typeof putQuestionsQuestionIdCommentCommentIdLike>>
>;

export type PutQuestionsQuestionIdCommentCommentIdLikeMutationError = ErrorType<unknown>;

/**
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂÆüÊñΩÔºàË≥™Âïè„Ç≥„É°„É≥„ÉàÔºâ
 */
export const usePutQuestionsQuestionIdCommentCommentIdLike = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putQuestionsQuestionIdCommentCommentIdLike>>,
    TError,
    {questionId: string; commentId: string},
    TContext
  >;
}) => {
  const mutationOptions = getPutQuestionsQuestionIdCommentCommentIdLikeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Ë≥™Âïè„ÅÆ„Ç≥„É°„É≥„Éà„Å´ÂØæ„Åô„Çã„ÅÑ„ÅÑ„Å≠„ÇíÂèñ„ÇäÊ∂à„Åó„Åæ„Åô„ÄÇ
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂèñÊ∂àÔºàË≥™Âïè„Ç≥„É°„É≥„ÉàÔºâ
 */
export const deleteQuestionsQuestionIdCommentsCommentIdLike = (questionId: string, commentId: string) => {
  return backendCustomInstance<void>({
    url: `/accounts/me/likes/questions/${questionId}/comments/${commentId}`,
    method: 'delete',
  });
};

export const getDeleteQuestionsQuestionIdCommentsCommentIdLikeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteQuestionsQuestionIdCommentsCommentIdLike>>,
    TError,
    {questionId: string; commentId: string},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteQuestionsQuestionIdCommentsCommentIdLike>>,
  TError,
  {questionId: string; commentId: string},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteQuestionsQuestionIdCommentsCommentIdLike>>,
    {questionId: string; commentId: string}
  > = props => {
    const {questionId, commentId} = props ?? {};

    return deleteQuestionsQuestionIdCommentsCommentIdLike(questionId, commentId);
  };

  return {mutationFn, ...mutationOptions};
};

export type DeleteQuestionsQuestionIdCommentsCommentIdLikeMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteQuestionsQuestionIdCommentsCommentIdLike>>
>;

export type DeleteQuestionsQuestionIdCommentsCommentIdLikeMutationError = ErrorType<unknown>;

/**
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂèñÊ∂àÔºàË≥™Âïè„Ç≥„É°„É≥„ÉàÔºâ
 */
export const useDeleteQuestionsQuestionIdCommentsCommentIdLike = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteQuestionsQuestionIdCommentsCommentIdLike>>,
    TError,
    {questionId: string; commentId: string},
    TContext
  >;
}) => {
  const mutationOptions = getDeleteQuestionsQuestionIdCommentsCommentIdLikeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÂõûÁ≠î„Å´ÂØæ„Åô„Çã„ÅÑ„ÅÑ„Å≠„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂÆüÊñΩÔºàÂõûÁ≠îÔºâ
 */
export const putQuestionsQuestionIdAnswerAnswerIdLike = (questionId: string, answerId: string) => {
  return backendCustomInstance<void>({
    url: `/accounts/me/likes/questions/${questionId}/answers/${answerId}`,
    method: 'put',
  });
};

export const getPutQuestionsQuestionIdAnswerAnswerIdLikeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putQuestionsQuestionIdAnswerAnswerIdLike>>,
    TError,
    {questionId: string; answerId: string},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putQuestionsQuestionIdAnswerAnswerIdLike>>,
  TError,
  {questionId: string; answerId: string},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putQuestionsQuestionIdAnswerAnswerIdLike>>,
    {questionId: string; answerId: string}
  > = props => {
    const {questionId, answerId} = props ?? {};

    return putQuestionsQuestionIdAnswerAnswerIdLike(questionId, answerId);
  };

  return {mutationFn, ...mutationOptions};
};

export type PutQuestionsQuestionIdAnswerAnswerIdLikeMutationResult = NonNullable<
  Awaited<ReturnType<typeof putQuestionsQuestionIdAnswerAnswerIdLike>>
>;

export type PutQuestionsQuestionIdAnswerAnswerIdLikeMutationError = ErrorType<unknown>;

/**
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂÆüÊñΩÔºàÂõûÁ≠îÔºâ
 */
export const usePutQuestionsQuestionIdAnswerAnswerIdLike = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putQuestionsQuestionIdAnswerAnswerIdLike>>,
    TError,
    {questionId: string; answerId: string},
    TContext
  >;
}) => {
  const mutationOptions = getPutQuestionsQuestionIdAnswerAnswerIdLikeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÂõûÁ≠î„Å´ÂØæ„Åô„Çã„ÅÑ„ÅÑ„Å≠„ÇíÂèñ„ÇäÊ∂à„Åó„Åæ„Åô„ÄÇ
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂèñÊ∂àÔºàÂõûÁ≠îÔºâ
 */
export const deleteQuestionsQuestionIdAnswersAnswerIdLike = (questionId: string, answerId: string) => {
  return backendCustomInstance<void>({
    url: `/accounts/me/likes/questions/${questionId}/answers/${answerId}`,
    method: 'delete',
  });
};

export const getDeleteQuestionsQuestionIdAnswersAnswerIdLikeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteQuestionsQuestionIdAnswersAnswerIdLike>>,
    TError,
    {questionId: string; answerId: string},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteQuestionsQuestionIdAnswersAnswerIdLike>>,
  TError,
  {questionId: string; answerId: string},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteQuestionsQuestionIdAnswersAnswerIdLike>>,
    {questionId: string; answerId: string}
  > = props => {
    const {questionId, answerId} = props ?? {};

    return deleteQuestionsQuestionIdAnswersAnswerIdLike(questionId, answerId);
  };

  return {mutationFn, ...mutationOptions};
};

export type DeleteQuestionsQuestionIdAnswersAnswerIdLikeMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteQuestionsQuestionIdAnswersAnswerIdLike>>
>;

export type DeleteQuestionsQuestionIdAnswersAnswerIdLikeMutationError = ErrorType<unknown>;

/**
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂèñÊ∂àÔºàÂõûÁ≠îÔºâ
 */
export const useDeleteQuestionsQuestionIdAnswersAnswerIdLike = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteQuestionsQuestionIdAnswersAnswerIdLike>>,
    TError,
    {questionId: string; answerId: string},
    TContext
  >;
}) => {
  const mutationOptions = getDeleteQuestionsQuestionIdAnswersAnswerIdLikeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÂõûÁ≠î„ÅÆ„Ç≥„É°„É≥„Éà„Å´ÂØæ„Åô„Çã„ÅÑ„ÅÑ„Å≠„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂÆüÊñΩÔºàÂõûÁ≠î„Ç≥„É°„É≥„ÉàÔºâ
 */
export const putQuestionsQuestionIdAnswerAnswerIdCommentCommentIdLike = (
  questionId: string,
  answerId: string,
  commentId: string,
) => {
  return backendCustomInstance<void>({
    url: `/accounts/me/likes/questions/${questionId}/answers/${answerId}/comments/${commentId}`,
    method: 'put',
  });
};

export const getPutQuestionsQuestionIdAnswerAnswerIdCommentCommentIdLikeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putQuestionsQuestionIdAnswerAnswerIdCommentCommentIdLike>>,
    TError,
    {questionId: string; answerId: string; commentId: string},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putQuestionsQuestionIdAnswerAnswerIdCommentCommentIdLike>>,
  TError,
  {questionId: string; answerId: string; commentId: string},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putQuestionsQuestionIdAnswerAnswerIdCommentCommentIdLike>>,
    {questionId: string; answerId: string; commentId: string}
  > = props => {
    const {questionId, answerId, commentId} = props ?? {};

    return putQuestionsQuestionIdAnswerAnswerIdCommentCommentIdLike(questionId, answerId, commentId);
  };

  return {mutationFn, ...mutationOptions};
};

export type PutQuestionsQuestionIdAnswerAnswerIdCommentCommentIdLikeMutationResult = NonNullable<
  Awaited<ReturnType<typeof putQuestionsQuestionIdAnswerAnswerIdCommentCommentIdLike>>
>;

export type PutQuestionsQuestionIdAnswerAnswerIdCommentCommentIdLikeMutationError = ErrorType<unknown>;

/**
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂÆüÊñΩÔºàÂõûÁ≠î„Ç≥„É°„É≥„ÉàÔºâ
 */
export const usePutQuestionsQuestionIdAnswerAnswerIdCommentCommentIdLike = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putQuestionsQuestionIdAnswerAnswerIdCommentCommentIdLike>>,
    TError,
    {questionId: string; answerId: string; commentId: string},
    TContext
  >;
}) => {
  const mutationOptions = getPutQuestionsQuestionIdAnswerAnswerIdCommentCommentIdLikeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÂõûÁ≠î„ÅÆ„Ç≥„É°„É≥„Éà„Å´ÂØæ„Åô„Çã„ÅÑ„ÅÑ„Å≠„ÇíÂèñ„ÇäÊ∂à„Åó„Åæ„Åô„ÄÇ
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂèñÊ∂àÔºàÂõûÁ≠î„Ç≥„É°„É≥„ÉàÔºâ
 */
export const deleteQuestionsQuestionIdAnswersAnswerIdCommentsCommentIdLike = (
  questionId: string,
  answerId: string,
  commentId: string,
) => {
  return backendCustomInstance<void>({
    url: `/accounts/me/likes/questions/${questionId}/answers/${answerId}/comments/${commentId}`,
    method: 'delete',
  });
};

export const getDeleteQuestionsQuestionIdAnswersAnswerIdCommentsCommentIdLikeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteQuestionsQuestionIdAnswersAnswerIdCommentsCommentIdLike>>,
    TError,
    {questionId: string; answerId: string; commentId: string},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteQuestionsQuestionIdAnswersAnswerIdCommentsCommentIdLike>>,
  TError,
  {questionId: string; answerId: string; commentId: string},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteQuestionsQuestionIdAnswersAnswerIdCommentsCommentIdLike>>,
    {questionId: string; answerId: string; commentId: string}
  > = props => {
    const {questionId, answerId, commentId} = props ?? {};

    return deleteQuestionsQuestionIdAnswersAnswerIdCommentsCommentIdLike(questionId, answerId, commentId);
  };

  return {mutationFn, ...mutationOptions};
};

export type DeleteQuestionsQuestionIdAnswersAnswerIdCommentsCommentIdLikeMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteQuestionsQuestionIdAnswersAnswerIdCommentsCommentIdLike>>
>;

export type DeleteQuestionsQuestionIdAnswersAnswerIdCommentsCommentIdLikeMutationError = ErrorType<unknown>;

/**
 * @summary „ÅÑ„ÅÑ„Å≠„ÅÆÂèñÊ∂àÔºàÂõûÁ≠î„Ç≥„É°„É≥„ÉàÔºâ
 */
export const useDeleteQuestionsQuestionIdAnswersAnswerIdCommentsCommentIdLike = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteQuestionsQuestionIdAnswersAnswerIdCommentsCommentIdLike>>,
    TError,
    {questionId: string; answerId: string; commentId: string},
    TContext
  >;
}) => {
  const mutationOptions = getDeleteQuestionsQuestionIdAnswersAnswerIdCommentsCommentIdLikeMutationOptions(options);

  return useMutation(mutationOptions);
};
