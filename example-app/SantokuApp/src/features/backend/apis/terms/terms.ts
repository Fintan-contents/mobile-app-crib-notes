/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * SantokuApp REST API
 * SantokuApp„ÅÆREST API„ÄÇ
 * OpenAPI spec version: 1.0.0
 */
import {useQuery} from '@tanstack/react-query';
import type {UseQueryOptions, QueryFunction, UseQueryResult, QueryKey} from '@tanstack/react-query';
import type {TermsOfService} from '.././model';
import {backendCustomInstance} from '../../utils/customInstance';
import type {ErrorType} from '../../utils/customInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * ÊúâÂäπ„Å™Âà©Áî®Ë¶èÁ¥Ñ„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆAPI„ÅÆÂëº„Å≥Âá∫„Åó„Å´„ÅØË™çË®ºÊÉÖÂ†±„ÅØ‰∏çË¶Å„Åß„Åô„ÄÇ

 * @summary ÊúâÂäπ„Å™Âà©Áî®Ë¶èÁ¥Ñ„ÅÆÂèñÂæó
 */
export const getTerms = (signal?: AbortSignal) => {
  return backendCustomInstance<TermsOfService>({url: `/terms`, method: 'get', signal});
};

export const getGetTermsQueryKey = () => [`/terms`] as const;

export const getGetTermsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTerms>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData>;
}): UseQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTermsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTerms>>> = ({signal}) => getTerms(signal);

  return {queryKey, queryFn, ...queryOptions};
};

export type GetTermsQueryResult = NonNullable<Awaited<ReturnType<typeof getTerms>>>;
export type GetTermsQueryError = ErrorType<unknown>;

/**
 * @summary ÊúâÂäπ„Å™Âà©Áî®Ë¶èÁ¥Ñ„ÅÆÂèñÂæó
 */
export const useGetTerms = <TData = Awaited<ReturnType<typeof getTerms>>, TError = ErrorType<unknown>>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTerms>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getGetTermsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};
