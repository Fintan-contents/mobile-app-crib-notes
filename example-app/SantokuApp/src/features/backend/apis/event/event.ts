/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * SantokuApp REST API
 * SantokuApp„ÅÆREST API„ÄÇ
 * OpenAPI spec version: 1.0.0
 */
import {useQuery, useMutation} from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';
import type {Event, BadRequestResponse, GetEventsParams, EventContent, EventRegistration} from '.././model';
import {backendCustomInstance} from '../../utils/customInstance';
import type {ErrorType} from '../../utils/customInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Êé≤ËºâÊúüÈñì‰∏≠„ÅÆ„Ç§„Éô„É≥„Éà„Åæ„Åü„ÅØÂÖ®„Ç§„Éô„É≥„Éà„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ
 * @summary „Ç§„Éô„É≥„Éà‰∏ÄË¶ßÂèñÂæó
 */
export const getEvents = (params: GetEventsParams, signal?: AbortSignal) => {
  return backendCustomInstance<Event[]>({url: `/events`, method: 'get', params, signal});
};

export const getGetEventsQueryKey = (params: GetEventsParams) => [`/events`, ...(params ? [params] : [])];

export type GetEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getEvents>>>;
export type GetEventsQueryError = ErrorType<BadRequestResponse>;

export const useGetEvents = <TData = Awaited<ReturnType<typeof getEvents>>, TError = ErrorType<BadRequestResponse>>(
  params: GetEventsParams,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEvents>>> = ({signal}) => getEvents(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof getEvents>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryKey;

  return query;
};

/**
 * „Ç§„Éô„É≥„Éà„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ
 * @summary „Ç§„Éô„É≥„ÉàÁôªÈå≤
 */
export const postEvents = (eventRegistration: EventRegistration) => {
  return backendCustomInstance<EventContent>({
    url: `/events`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: eventRegistration,
  });
};

export type PostEventsMutationResult = NonNullable<Awaited<ReturnType<typeof postEvents>>>;
export type PostEventsMutationBody = EventRegistration;
export type PostEventsMutationError = ErrorType<BadRequestResponse>;

export const usePostEvents = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postEvents>>, TError, {data: EventRegistration}, TContext>;
}) => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postEvents>>, {data: EventRegistration}> = props => {
    const {data} = props ?? {};

    return postEvents(data);
  };

  return useMutation<Awaited<ReturnType<typeof postEvents>>, TError, {data: EventRegistration}, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * ÁâπÂÆö„ÅÆ„Ç§„Éô„É≥„Éà„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ
 * @summary „Ç§„Éô„É≥„ÉàÂèñÂæó
 */
export const getEventsEventId = (eventId: string, signal?: AbortSignal) => {
  return backendCustomInstance<Event>({url: `/events/${eventId}`, method: 'get', signal});
};

export const getGetEventsEventIdQueryKey = (eventId: string) => [`/events/${eventId}`];

export type GetEventsEventIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEventsEventId>>>;
export type GetEventsEventIdQueryError = ErrorType<unknown>;

export const useGetEventsEventId = <TData = Awaited<ReturnType<typeof getEventsEventId>>, TError = ErrorType<unknown>>(
  eventId: string,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getEventsEventId>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventsEventIdQueryKey(eventId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventsEventId>>> = ({signal}) =>
    getEventsEventId(eventId, signal);

  const query = useQuery<Awaited<ReturnType<typeof getEventsEventId>>, TError, TData>(queryKey, queryFn, {
    enabled: !!eventId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryKey;

  return query;
};
