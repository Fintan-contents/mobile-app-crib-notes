/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * SantokuApp REST API
 * SantokuApp„ÅÆREST API„ÄÇ
 * OpenAPI spec version: 1.0.0
 */
import {useQuery} from 'react-query';
import type {UseQueryOptions, QueryFunction, UseQueryResult, QueryKey} from 'react-query';
import type {CsrfTokenResponse, AppUpdatesResponse, BadRequestResponse} from '.././model';
import {backendCustomInstance} from '../../utils/customInstance';
import type {ErrorType} from '../../utils/customInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * CSRF„Éà„Éº„ÇØ„É≥„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ
 * @summary CSRF„Éà„Éº„ÇØ„É≥„ÅÆÂèñÂæó
 */
export const getCsrfToken = (signal?: AbortSignal) => {
  return backendCustomInstance<CsrfTokenResponse>({url: `/system/csrf-token`, method: 'get', signal});
};

export const getGetCsrfTokenQueryKey = () => [`/system/csrf-token`];

export type GetCsrfTokenQueryResult = NonNullable<Awaited<ReturnType<typeof getCsrfToken>>>;
export type GetCsrfTokenQueryError = ErrorType<unknown>;

export const useGetCsrfToken = <
  TData = Awaited<ReturnType<typeof getCsrfToken>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getCsrfToken>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCsrfTokenQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCsrfToken>>> = ({signal}) => getCsrfToken(signal);

  const query = useQuery<Awaited<ReturnType<typeof getCsrfToken>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryKey;

  return query;
};

/**
 * ÊåáÂÆö„Åï„Çå„Åü„Ç¢„Éó„É™„ÅÆÁ®ÆÂà•„Éª„Éê„Éº„Ç∏„Éß„É≥Áï™Âè∑„Å´ÂØæ„Åó„ÄÅ„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„ÅåÂøÖË¶Å„Åã„Å©„ÅÜ„Åã„ÅÆÂà§Êñ≠ÁµêÊûú„ÇíËøî„Åó„Åæ„Åô„ÄÇ

„Çµ„Éº„Éê„Å´Ë®≠ÂÆö„Åï„Çå„Åü„Éê„Éº„Ç∏„Éß„É≥Áï™Âè∑„Å®ÊåáÂÆö„Åï„Çå„Åü„Éê„Éº„Ç∏„Éß„É≥Áï™Âè∑„ÅÆÊØîËºÉ„Åß„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„ÅÆË¶ÅÂê¶„ÅåÊ±∫ÂÆö„Åó„Åæ„Åô„ÄÇ
Â§ßÂ∞èÊØîËºÉ„ÅØ„Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØ„Éê„Éº„Ç∏„Éß„Éã„É≥„Ç∞„ÅÆ„É´„Éº„É´„Å´Ê≤ø„Å£„Å¶ÂÆüÊñΩ„Åï„Çå„Åæ„Åô„ÄÇ
ÂÆüÈöõ„Å´Â≠òÂú®„Åô„Çã„Éê„Éº„Ç∏„Éß„É≥Áï™Âè∑„Åã„Å©„ÅÜ„Åã„ÅØÂà§Êñ≠ÁµêÊûú„Å´ÂΩ±Èüø„Åó„Åæ„Åõ„Çì„ÄÇ

Ê¨°„ÅÆÂ†¥Âêà„ÅØHTTP„Çπ„ÉÜ„Éº„Çø„Çπ„Ç≥„Éº„Éâ404ÔºàNot FoundÔºâ„ÇíÂøúÁ≠î„Åó„Åæ„Åô„ÄÇ
- ios„Åæ„Åü„ÅØandroid‰ª•Â§ñ„ÅÆÁ®ÆÂà•„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà
- „Çª„Éû„É≥„ÉÜ„Ç£„ÉÉ„ÇØ„Éê„Éº„Ç∏„Éß„É≥„Å®„Åó„Å¶Ë™çË≠ò„Åï„Çå„Å™„ÅÑ„Éê„Éº„Ç∏„Éß„É≥Áï™Âè∑„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà

 * @summary „Ç¢„Éó„É™Êõ¥Êñ∞ÊÉÖÂ†±„ÅÆÂèñÂæó
 */
export const getAppUpdates = (type: 'ios' | 'android', version: string, signal?: AbortSignal) => {
  return backendCustomInstance<AppUpdatesResponse>({
    url: `/system/app-updates/${type}/${version}`,
    method: 'get',
    signal,
  });
};

export const getGetAppUpdatesQueryKey = (type: 'ios' | 'android', version: string) => [
  `/system/app-updates/${type}/${version}`,
];

export type GetAppUpdatesQueryResult = NonNullable<Awaited<ReturnType<typeof getAppUpdates>>>;
export type GetAppUpdatesQueryError = ErrorType<BadRequestResponse>;

export const useGetAppUpdates = <
  TData = Awaited<ReturnType<typeof getAppUpdates>>,
  TError = ErrorType<BadRequestResponse>,
>(
  type: 'ios' | 'android',
  version: string,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getAppUpdates>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAppUpdatesQueryKey(type, version);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppUpdates>>> = ({signal}) =>
    getAppUpdates(type, version, signal);

  const query = useQuery<Awaited<ReturnType<typeof getAppUpdates>>, TError, TData>(queryKey, queryFn, {
    enabled: !!(type && version),
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryKey;

  return query;
};
