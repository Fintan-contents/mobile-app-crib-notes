/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * SantokuApp REST API
 * SantokuApp„ÅÆREST API„ÄÇ
 * OpenAPI spec version: 1.0.0
 */
import {useQuery} from 'react-query';
import type {UseQueryOptions, QueryFunction, UseQueryResult, QueryKey} from 'react-query';
import type {Notification} from '.././model';
import {backendCustomInstance} from '../../utils/customInstance';
import type {ErrorType} from '../../utils/customInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * „ÅäÁü•„Çâ„Åõ„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ
 * @summary „ÅäÁü•„Çâ„Åõ‰∏ÄË¶ßÂèñÂæó
 */
export const getListNotifications = (signal?: AbortSignal) => {
  return backendCustomInstance<Notification[]>({url: `/notifications`, method: 'get', signal});
};

export const getGetListNotificationsQueryKey = () => [`/notifications`];

export type GetListNotificationsQueryResult = NonNullable<Awaited<ReturnType<typeof getListNotifications>>>;
export type GetListNotificationsQueryError = ErrorType<unknown>;

export const useGetListNotifications = <
  TData = Awaited<ReturnType<typeof getListNotifications>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getListNotifications>>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetListNotificationsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getListNotifications>>> = ({signal}) =>
    getListNotifications(signal);

  const query = useQuery<Awaited<ReturnType<typeof getListNotifications>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryKey;

  return query;
};
