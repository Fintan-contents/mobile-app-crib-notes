/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * SantokuApp Sandbox REST API
 * SantokuApp Sandbox REST API
 * OpenAPI spec version: 1.0.0
 */
import {useQuery, useInfiniteQuery, useMutation} from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  ListTodoResponse,
  BadRequestResponse,
  ListTodoParams,
  Todo,
  TodoRegistration,
  ListTodoInfiniteResponse,
  ListTodoByCursorParams,
  NotFoundResponse,
} from './model';
import {sandboxCustomInstance} from '../../backend/utils/customInstance';
import type {ErrorType} from '../../backend/utils/customInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * List todo
 * @summary List todo
 */
export const listTodo = (params?: ListTodoParams, signal?: AbortSignal) => {
  return sandboxCustomInstance<ListTodoResponse>({url: `/todos`, method: 'get', params, signal});
};

export const getListTodoQueryKey = (params?: ListTodoParams) => [`/todos`, ...(params ? [params] : [])] as const;

export const getListTodoQueryOptions = <
  TData = Awaited<ReturnType<typeof listTodo>>,
  TError = ErrorType<BadRequestResponse>,
>(
  params?: ListTodoParams,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof listTodo>>, TError, TData>},
): UseQueryOptions<Awaited<ReturnType<typeof listTodo>>, TError, TData> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListTodoQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listTodo>>> = ({signal}) => listTodo(params, signal);

  return {queryKey, queryFn, ...queryOptions};
};

export type ListTodoQueryResult = NonNullable<Awaited<ReturnType<typeof listTodo>>>;
export type ListTodoQueryError = ErrorType<BadRequestResponse>;

/**
 * @summary List todo
 */
export const useListTodo = <TData = Awaited<ReturnType<typeof listTodo>>, TError = ErrorType<BadRequestResponse>>(
  params?: ListTodoParams,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof listTodo>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getListTodoQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create todo
 * @summary Create todo
 */
export const postTodo = (todoRegistration: TodoRegistration) => {
  return sandboxCustomInstance<Todo>({
    url: `/todos`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: todoRegistration,
  });
};

export const getPostTodoMutationOptions = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postTodo>>, TError, {data: TodoRegistration}, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof postTodo>>, TError, {data: TodoRegistration}, TContext> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTodo>>, {data: TodoRegistration}> = props => {
    const {data} = props ?? {};

    return postTodo(data);
  };

  return {mutationFn, ...mutationOptions};
};

export type PostTodoMutationResult = NonNullable<Awaited<ReturnType<typeof postTodo>>>;
export type PostTodoMutationBody = TodoRegistration;
export type PostTodoMutationError = ErrorType<BadRequestResponse>;

/**
 * @summary Create todo
 */
export const usePostTodo = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof postTodo>>, TError, {data: TodoRegistration}, TContext>;
}) => {
  const mutationOptions = getPostTodoMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * List todo by cursor
 * @summary List todo by cursor
 */
export const listTodoByCursor = (params?: ListTodoByCursorParams) => {
  return sandboxCustomInstance<ListTodoInfiniteResponse>({url: `/todos/infinite`, method: 'get', params});
};

export const getListTodoByCursorQueryKey = (params?: ListTodoByCursorParams) =>
  [`/todos/infinite`, ...(params ? [params] : [])] as const;

export const getListTodoByCursorInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof listTodoByCursor>>,
  TError = ErrorType<BadRequestResponse>,
>(
  params?: ListTodoByCursorParams,
  options?: {query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof listTodoByCursor>>, TError, TData>},
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof listTodoByCursor>>, TError, TData> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListTodoByCursorQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listTodoByCursor>>> = ({pageParam}) =>
    listTodoByCursor({cursor: pageParam, ...params});

  return {queryKey, queryFn, ...queryOptions};
};

export type ListTodoByCursorInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof listTodoByCursor>>>;
export type ListTodoByCursorInfiniteQueryError = ErrorType<BadRequestResponse>;

/**
 * @summary List todo by cursor
 */
export const useListTodoByCursorInfinite = <
  TData = Awaited<ReturnType<typeof listTodoByCursor>>,
  TError = ErrorType<BadRequestResponse>,
>(
  params?: ListTodoByCursorParams,
  options?: {query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof listTodoByCursor>>, TError, TData>},
): UseInfiniteQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getListTodoByCursorInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Get todo
 * @summary Get todo
 */
export const getTodo = (todoId: number, signal?: AbortSignal) => {
  return sandboxCustomInstance<Todo>({url: `/todos/${todoId}`, method: 'get', signal});
};

export const getGetTodoQueryKey = (todoId: number) => [`/todos/${todoId}`] as const;

export const getGetTodoQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodo>>,
  TError = ErrorType<NotFoundResponse>,
>(
  todoId: number,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData>},
): UseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodoQueryKey(todoId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodo>>> = ({signal}) => getTodo(todoId, signal);

  return {queryKey, queryFn, enabled: !!todoId, ...queryOptions};
};

export type GetTodoQueryResult = NonNullable<Awaited<ReturnType<typeof getTodo>>>;
export type GetTodoQueryError = ErrorType<NotFoundResponse>;

/**
 * @summary Get todo
 */
export const useGetTodo = <TData = Awaited<ReturnType<typeof getTodo>>, TError = ErrorType<NotFoundResponse>>(
  todoId: number,
  options?: {query?: UseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const queryOptions = getGetTodoQueryOptions(todoId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {queryKey: QueryKey};

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update todo
 * @summary Update todo
 */
export const putTodo = (todoId: number, todoRegistration: TodoRegistration) => {
  return sandboxCustomInstance<Todo>({
    url: `/todos/${todoId}`,
    method: 'put',
    headers: {'Content-Type': 'application/json'},
    data: todoRegistration,
  });
};

export const getPutTodoMutationOptions = <
  TError = ErrorType<BadRequestResponse | NotFoundResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTodo>>,
    TError,
    {todoId: number; data: TodoRegistration},
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putTodo>>,
  TError,
  {todoId: number; data: TodoRegistration},
  TContext
> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putTodo>>,
    {todoId: number; data: TodoRegistration}
  > = props => {
    const {todoId, data} = props ?? {};

    return putTodo(todoId, data);
  };

  return {mutationFn, ...mutationOptions};
};

export type PutTodoMutationResult = NonNullable<Awaited<ReturnType<typeof putTodo>>>;
export type PutTodoMutationBody = TodoRegistration;
export type PutTodoMutationError = ErrorType<BadRequestResponse | NotFoundResponse>;

/**
 * @summary Update todo
 */
export const usePutTodo = <TError = ErrorType<BadRequestResponse | NotFoundResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTodo>>,
    TError,
    {todoId: number; data: TodoRegistration},
    TContext
  >;
}) => {
  const mutationOptions = getPutTodoMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Delete todo
 * @summary Delete todo
 */
export const deleteTodo = (todoId: number) => {
  return sandboxCustomInstance<void>({url: `/todos/${todoId}`, method: 'delete'});
};

export const getDeleteTodoMutationOptions = <TError = ErrorType<NotFoundResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTodo>>, TError, {todoId: number}, TContext>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteTodo>>, TError, {todoId: number}, TContext> => {
  const {mutation: mutationOptions} = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTodo>>, {todoId: number}> = props => {
    const {todoId} = props ?? {};

    return deleteTodo(todoId);
  };

  return {mutationFn, ...mutationOptions};
};

export type DeleteTodoMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTodo>>>;

export type DeleteTodoMutationError = ErrorType<NotFoundResponse>;

/**
 * @summary Delete todo
 */
export const useDeleteTodo = <TError = ErrorType<NotFoundResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteTodo>>, TError, {todoId: number}, TContext>;
}) => {
  const mutationOptions = getDeleteTodoMutationOptions(options);

  return useMutation(mutationOptions);
};
