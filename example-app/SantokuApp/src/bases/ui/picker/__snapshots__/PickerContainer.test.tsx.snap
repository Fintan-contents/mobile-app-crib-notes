// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PickerContainer only with required props renders successfully only with required props: Animating (slide in) 1`] = `
<View
  pointerEvents="box-none"
  style={
    [
      {
        "flex": 1,
        "justifyContent": "flex-end",
      },
    ]
  }
>
  <View
    animatedStyle={
      {
        "value": {
          "transform": [
            {
              "translateY": 74.00333333333333,
            },
          ],
        },
      }
    }
    collapsable={false}
    onLayout={[Function]}
    style={
      {
        "transform": [
          {
            "translateY": 1000,
          },
        ],
      }
    }
    testID="containerAnimated"
  >
    <View
      style={
        {
          "height": 400,
          "width": "100%",
        }
      }
    />
  </View>
</View>
`;

exports[`PickerContainer only with required props renders successfully only with required props: Animating (slide out) 1`] = `
<View
  pointerEvents="box-none"
  style={
    [
      {
        "flex": 1,
        "justifyContent": "flex-end",
      },
    ]
  }
>
  <View
    animatedStyle={
      {
        "value": {
          "transform": [
            {
              "translateY": 76.00333333333333,
            },
          ],
        },
      }
    }
    collapsable={false}
    onLayout={[Function]}
    style={
      {
        "transform": [
          {
            "translateY": 1000,
          },
        ],
      }
    }
  />
</View>
`;

exports[`PickerContainer only with required props renders successfully only with required props: Before animation started 1`] = `
<View
  pointerEvents="box-none"
  style={
    [
      {
        "flex": 1,
        "justifyContent": "flex-end",
      },
    ]
  }
>
  <View
    animatedStyle={
      {
        "value": {
          "transform": [
            {
              "translateY": 1000,
            },
          ],
        },
      }
    }
    collapsable={false}
    onLayout={[Function]}
    style={
      {
        "transform": [
          {
            "translateY": 1000,
          },
        ],
      }
    }
    testID="containerAnimated"
  >
    <View
      style={
        {
          "height": 400,
          "width": "100%",
        }
      }
    />
  </View>
</View>
`;

exports[`PickerContainer only with required props renders successfully only with required props: Just After slide in animation completed 1`] = `
<View
  pointerEvents="box-none"
  style={
    [
      {
        "flex": 1,
        "justifyContent": "flex-end",
      },
    ]
  }
>
  <View
    animatedStyle={
      {
        "value": {
          "transform": [
            {
              "translateY": 0,
            },
          ],
        },
      }
    }
    collapsable={false}
    onLayout={[Function]}
    style={
      {
        "transform": [
          {
            "translateY": 1000,
          },
        ],
      }
    }
    testID="containerAnimated"
  >
    <View
      style={
        {
          "height": 400,
          "width": "100%",
        }
      }
    />
  </View>
</View>
`;

exports[`PickerContainer only with required props renders successfully only with required props: Just After slide in animation completed 2`] = `
<View
  pointerEvents="box-none"
  style={
    [
      {
        "flex": 1,
        "justifyContent": "flex-end",
      },
    ]
  }
>
  <View
    animatedStyle={
      {
        "value": {
          "transform": [
            {
              "translateY": 0,
            },
          ],
        },
      }
    }
    collapsable={false}
    onLayout={[Function]}
    style={
      {
        "transform": [
          {
            "translateY": 1000,
          },
        ],
      }
    }
    testID="containerAnimated"
  >
    <View
      style={
        {
          "height": 400,
          "width": "100%",
        }
      }
    />
  </View>
</View>
`;

exports[`PickerContainer only with required props renders successfully only with required props: Just After slide out animation completed 1`] = `null`;

exports[`PickerContainer only with required props renders successfully only with required props: Just After slide out animation completed 2`] = `null`;

exports[`PickerContainer with all props should be applied properly: PickerContainer with all props. 1`] = `
<View
  pointerEvents="box-none"
  style={
    [
      {
        "flex": 1,
        "justifyContent": "flex-end",
      },
    ]
  }
>
  <View
    animatedStyle={
      {
        "value": {
          "transform": [
            {
              "translateY": 1000,
            },
          ],
        },
      }
    }
    collapsable={false}
    onLayout={[Function]}
    style={
      {
        "backgroundColor": "green",
        "transform": [
          {
            "translateY": 1000,
          },
        ],
      }
    }
    testID="animatedView"
  />
</View>
`;
