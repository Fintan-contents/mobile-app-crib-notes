/**
 * Generated by orval v6.7.1 üç∫
 * Do not edit manually.
 * SantokuApp REST API
 * SantokuApp„ÅÆREST API„ÄÇ
 * OpenAPI spec version: 1.0.0
 */
import {useQuery, UseQueryOptions, QueryFunction, UseQueryResult, QueryKey} from 'react-query';
import type {TermsOfService} from '.././model';
import {backendCustomInstance, ErrorType} from '../../../framework/backend/customInstance';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;

/**
 * ÊúâÂäπ„Å™Âà©Áî®Ë¶èÁ¥Ñ„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ„Åì„ÅÆAPI„ÅÆÂëº„Å≥Âá∫„Åó„Å´„ÅØË™çË®ºÊÉÖÂ†±„ÅØ‰∏çË¶Å„Åß„Åô„ÄÇ

 * @summary ÊúâÂäπ„Å™Âà©Áî®Ë¶èÁ¥Ñ„ÅÆÂèñÂæó
 */
export const getTerms = () => {
  return backendCustomInstance<TermsOfService>({url: `/terms`, method: 'get'});
};

export const getGetTermsQueryKey = () => [`/terms`];

export type GetTermsQueryResult = NonNullable<AsyncReturnType<typeof getTerms>>;
export type GetTermsQueryError = ErrorType<unknown>;

export const useGetTerms = <TData = AsyncReturnType<typeof getTerms>, TError = ErrorType<unknown>>(options?: {
  query?: UseQueryOptions<AsyncReturnType<typeof getTerms>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTermsQueryKey();

  const queryFn: QueryFunction<AsyncReturnType<typeof getTerms>> = () => getTerms();

  const query = useQuery<AsyncReturnType<typeof getTerms>, TError, TData>(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};
