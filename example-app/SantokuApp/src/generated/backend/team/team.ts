/**
 * Generated by orval v6.7.1 üç∫
 * Do not edit manually.
 * SantokuApp REST API
 * SantokuApp„ÅÆREST API„ÄÇ
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';
import type {
  Team,
  TeamInvitation,
  TimetableTemplate,
  GetTeamsTeamIdTimetableTemplatesParams,
  TimetableOfDay,
  GetTeamsTeamIdTimetablesParams,
  TimetableOfDayInput,
} from '.././model';
import {backendCustomInstance, ErrorType} from '../../../framework/backend/customInstance';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;

/**
 * „ÉÅ„Éº„É†„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ„ÉÅ„Éº„É†„Çí‰ΩúÊàê„Åó„Åü„Ç¢„Ç´„Ç¶„É≥„Éà„ÅØ ÁâπÊ®©„É¶„Éº„Ç∂„Å®„Åó„Å¶ÁôªÈå≤„Åï„Çå„Åæ„Åô„ÄÇ

 * @summary „ÉÅ„Éº„É†ÁôªÈå≤
 */
export const postTeams = (team: Team) => {
  return backendCustomInstance<Team>({
    url: `/teams`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: team,
  });
};

export type PostTeamsMutationResult = NonNullable<AsyncReturnType<typeof postTeams>>;
export type PostTeamsMutationBody = Team;
export type PostTeamsMutationError = ErrorType<unknown>;

export const usePostTeams = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<typeof postTeams>, TError, {data: Team}, TContext>;
}) => {
  const {mutation: mutationOptions} = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof postTeams>, {data: Team}> = props => {
    const {data} = props || {};

    return postTeams(data);
  };

  return useMutation<AsyncReturnType<typeof postTeams>, TError, {data: Team}, TContext>(mutationFn, mutationOptions);
};
/**
 * „ÉÅ„Éº„É†ID„ÇíÊåáÂÆö„Åó„Å¶„ÄÅ„ÉÅ„Éº„É†„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary „ÉÅ„Éº„É†ÂèñÂæó
 */
export const getTeamsTeamId = (teamId: string) => {
  return backendCustomInstance<Team>({url: `/teams/${teamId}`, method: 'get'});
};

export const getGetTeamsTeamIdQueryKey = (teamId: string) => [`/teams/${teamId}`];

export type GetTeamsTeamIdQueryResult = NonNullable<AsyncReturnType<typeof getTeamsTeamId>>;
export type GetTeamsTeamIdQueryError = ErrorType<unknown>;

export const useGetTeamsTeamId = <TData = AsyncReturnType<typeof getTeamsTeamId>, TError = ErrorType<unknown>>(
  teamId: string,
  options?: {query?: UseQueryOptions<AsyncReturnType<typeof getTeamsTeamId>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdQueryKey(teamId);

  const queryFn: QueryFunction<AsyncReturnType<typeof getTeamsTeamId>> = () => getTeamsTeamId(teamId);

  const query = useQuery<AsyncReturnType<typeof getTeamsTeamId>, TError, TData>(queryKey, queryFn, {
    enabled: !!teamId,
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

/**
 * „ÉÅ„Éº„É†„ÅÆÂèÇÂä†„Å´ÂøÖË¶Å„Å™ÊãõÂæÖ„Ç≥„Éº„Éâ„ÇíÁô∫Ë°å„Åó„Åæ„Åô„ÄÇ

 * @summary ÊãõÂæÖ„Ç≥„Éº„ÉâÁô∫Ë°å
 */
export const postTeamsTeamIdInvitationCode = (teamId: string) => {
  return backendCustomInstance<TeamInvitation>({url: `/teams/${teamId}/invitation-code`, method: 'post'});
};

export type PostTeamsTeamIdInvitationCodeMutationResult = NonNullable<
  AsyncReturnType<typeof postTeamsTeamIdInvitationCode>
>;

export type PostTeamsTeamIdInvitationCodeMutationError = ErrorType<unknown>;

export const usePostTeamsTeamIdInvitationCode = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof postTeamsTeamIdInvitationCode>,
    TError,
    {teamId: string},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof postTeamsTeamIdInvitationCode>,
    {teamId: string}
  > = props => {
    const {teamId} = props || {};

    return postTeamsTeamIdInvitationCode(teamId);
  };

  return useMutation<AsyncReturnType<typeof postTeamsTeamIdInvitationCode>, TError, {teamId: string}, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * „ÉÅ„Éº„É†„Å´ÂèÇÂä†„Åó„Åæ„Åô„ÄÇ

 * @summary „ÉÅ„Éº„É†ÂèÇÂä†
 */
export const postTeamsTeamIdJoin = (teamId: string, teamInvitation: TeamInvitation) => {
  return backendCustomInstance<Team>({
    url: `/teams/${teamId}/join`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: teamInvitation,
  });
};

export type PostTeamsTeamIdJoinMutationResult = NonNullable<AsyncReturnType<typeof postTeamsTeamIdJoin>>;
export type PostTeamsTeamIdJoinMutationBody = TeamInvitation;
export type PostTeamsTeamIdJoinMutationError = ErrorType<unknown>;

export const usePostTeamsTeamIdJoin = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof postTeamsTeamIdJoin>,
    TError,
    {teamId: string; data: TeamInvitation},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof postTeamsTeamIdJoin>,
    {teamId: string; data: TeamInvitation}
  > = props => {
    const {teamId, data} = props || {};

    return postTeamsTeamIdJoin(teamId, data);
  };

  return useMutation<
    AsyncReturnType<typeof postTeamsTeamIdJoin>,
    TError,
    {teamId: string; data: TeamInvitation},
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà‰∏ÄË¶ßÂèñÂæó
 */
export const getTeamsTeamIdTimetableTemplates = (teamId: string, params?: GetTeamsTeamIdTimetableTemplatesParams) => {
  return backendCustomInstance<TimetableTemplate[]>({
    url: `/teams/${teamId}/timetable-templates`,
    method: 'get',
    params,
  });
};

export const getGetTeamsTeamIdTimetableTemplatesQueryKey = (
  teamId: string,
  params?: GetTeamsTeamIdTimetableTemplatesParams,
) => [`/teams/${teamId}/timetable-templates`, ...(params ? [params] : [])];

export type GetTeamsTeamIdTimetableTemplatesQueryResult = NonNullable<
  AsyncReturnType<typeof getTeamsTeamIdTimetableTemplates>
>;
export type GetTeamsTeamIdTimetableTemplatesQueryError = ErrorType<unknown>;

export const useGetTeamsTeamIdTimetableTemplates = <
  TData = AsyncReturnType<typeof getTeamsTeamIdTimetableTemplates>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  params?: GetTeamsTeamIdTimetableTemplatesParams,
  options?: {query?: UseQueryOptions<AsyncReturnType<typeof getTeamsTeamIdTimetableTemplates>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdTimetableTemplatesQueryKey(teamId, params);

  const queryFn: QueryFunction<AsyncReturnType<typeof getTeamsTeamIdTimetableTemplates>> = () =>
    getTeamsTeamIdTimetableTemplates(teamId, params);

  const query = useQuery<AsyncReturnType<typeof getTeamsTeamIdTimetableTemplates>, TError, TData>(queryKey, queryFn, {
    enabled: !!teamId,
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

/**
 * ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ

 * @summary ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁôªÈå≤
 */
export const postTeamsTeamIdTimetableTemplates = (teamId: string, timetableTemplate: TimetableTemplate) => {
  return backendCustomInstance<TimetableTemplate>({
    url: `/teams/${teamId}/timetable-templates`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: timetableTemplate,
  });
};

export type PostTeamsTeamIdTimetableTemplatesMutationResult = NonNullable<
  AsyncReturnType<typeof postTeamsTeamIdTimetableTemplates>
>;
export type PostTeamsTeamIdTimetableTemplatesMutationBody = TimetableTemplate;
export type PostTeamsTeamIdTimetableTemplatesMutationError = ErrorType<unknown>;

export const usePostTeamsTeamIdTimetableTemplates = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof postTeamsTeamIdTimetableTemplates>,
    TError,
    {teamId: string; data: TimetableTemplate},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof postTeamsTeamIdTimetableTemplates>,
    {teamId: string; data: TimetableTemplate}
  > = props => {
    const {teamId, data} = props || {};

    return postTeamsTeamIdTimetableTemplates(teamId, data);
  };

  return useMutation<
    AsyncReturnType<typeof postTeamsTeamIdTimetableTemplates>,
    TError,
    {teamId: string; data: TimetableTemplate},
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂèñÂæó
 */
export const getTeamsTeamIdTimetableTemplatesTemplateId = (teamId: string, templateId: string) => {
  return backendCustomInstance<TimetableTemplate>({
    url: `/teams/${teamId}/timetable-templates/${templateId}`,
    method: 'get',
  });
};

export const getGetTeamsTeamIdTimetableTemplatesTemplateIdQueryKey = (teamId: string, templateId: string) => [
  `/teams/${teamId}/timetable-templates/${templateId}`,
];

export type GetTeamsTeamIdTimetableTemplatesTemplateIdQueryResult = NonNullable<
  AsyncReturnType<typeof getTeamsTeamIdTimetableTemplatesTemplateId>
>;
export type GetTeamsTeamIdTimetableTemplatesTemplateIdQueryError = ErrorType<unknown>;

export const useGetTeamsTeamIdTimetableTemplatesTemplateId = <
  TData = AsyncReturnType<typeof getTeamsTeamIdTimetableTemplatesTemplateId>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  templateId: string,
  options?: {
    query?: UseQueryOptions<AsyncReturnType<typeof getTeamsTeamIdTimetableTemplatesTemplateId>, TError, TData>;
  },
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdTimetableTemplatesTemplateIdQueryKey(teamId, templateId);

  const queryFn: QueryFunction<AsyncReturnType<typeof getTeamsTeamIdTimetableTemplatesTemplateId>> = () =>
    getTeamsTeamIdTimetableTemplatesTemplateId(teamId, templateId);

  const query = useQuery<AsyncReturnType<typeof getTeamsTeamIdTimetableTemplatesTemplateId>, TError, TData>(
    queryKey,
    queryFn,
    {enabled: !!(teamId && templateId), ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô„ÄÇ

 * @summary ÊôÇÈñìÂâ≤„ÉÜ„É≥„Éó„É¨„Éº„ÉàÊõ¥Êñ∞
 */
export const putTeamsTeamIdTimetableTemplatesTemplateId = (
  teamId: string,
  templateId: string,
  timetableTemplate: TimetableTemplate,
) => {
  return backendCustomInstance<TimetableTemplate>({
    url: `/teams/${teamId}/timetable-templates/${templateId}`,
    method: 'put',
    headers: {'Content-Type': 'application/json'},
    data: timetableTemplate,
  });
};

export type PutTeamsTeamIdTimetableTemplatesTemplateIdMutationResult = NonNullable<
  AsyncReturnType<typeof putTeamsTeamIdTimetableTemplatesTemplateId>
>;
export type PutTeamsTeamIdTimetableTemplatesTemplateIdMutationBody = TimetableTemplate;
export type PutTeamsTeamIdTimetableTemplatesTemplateIdMutationError = ErrorType<unknown>;

export const usePutTeamsTeamIdTimetableTemplatesTemplateId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof putTeamsTeamIdTimetableTemplatesTemplateId>,
    TError,
    {teamId: string; templateId: string; data: TimetableTemplate},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof putTeamsTeamIdTimetableTemplatesTemplateId>,
    {teamId: string; templateId: string; data: TimetableTemplate}
  > = props => {
    const {teamId, templateId, data} = props || {};

    return putTeamsTeamIdTimetableTemplatesTemplateId(teamId, templateId, data);
  };

  return useMutation<
    AsyncReturnType<typeof putTeamsTeamIdTimetableTemplatesTemplateId>,
    TError,
    {teamId: string; templateId: string; data: TimetableTemplate},
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤ÂèñÂæó
 */
export const getTeamsTeamIdTimetablesTimetableId = (teamId: string, timetableId: string) => {
  return backendCustomInstance<TimetableOfDay>({url: `/teams/${teamId}/timetables/${timetableId}`, method: 'get'});
};

export const getGetTeamsTeamIdTimetablesTimetableIdQueryKey = (teamId: string, timetableId: string) => [
  `/teams/${teamId}/timetables/${timetableId}`,
];

export type GetTeamsTeamIdTimetablesTimetableIdQueryResult = NonNullable<
  AsyncReturnType<typeof getTeamsTeamIdTimetablesTimetableId>
>;
export type GetTeamsTeamIdTimetablesTimetableIdQueryError = ErrorType<unknown>;

export const useGetTeamsTeamIdTimetablesTimetableId = <
  TData = AsyncReturnType<typeof getTeamsTeamIdTimetablesTimetableId>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  timetableId: string,
  options?: {query?: UseQueryOptions<AsyncReturnType<typeof getTeamsTeamIdTimetablesTimetableId>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdTimetablesTimetableIdQueryKey(teamId, timetableId);

  const queryFn: QueryFunction<AsyncReturnType<typeof getTeamsTeamIdTimetablesTimetableId>> = () =>
    getTeamsTeamIdTimetablesTimetableId(teamId, timetableId);

  const query = useQuery<AsyncReturnType<typeof getTeamsTeamIdTimetablesTimetableId>, TError, TData>(
    queryKey,
    queryFn,
    {enabled: !!(teamId && timetableId), ...queryOptions},
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * ‰ªäÊó•„ÅÆÊôÇÈñìÂâ≤„ÇíÈñãÂßã„Åó„Åæ„Åô„ÄÇ„ÉÅ„Éº„É†„É°„É≥„Éê„Éº„Å´‰ªäÊó•„ÅÆÊôÇÈñìÂâ≤„ÅÆÈñãÂßã„ÇíÈÄöÁü•„Åó„Åæ„Åô„ÄÇ
 * @summary ‰ªäÊó•„ÅÆÊôÇÈñìÂâ≤ÈñãÂßã
 */
export const putTeamsTeamIdTimetablesTimetableId = (teamId: string, timetableId: string) => {
  return backendCustomInstance<TimetableOfDay>({url: `/teams/${teamId}/timetables/${timetableId}`, method: 'put'});
};

export type PutTeamsTeamIdTimetablesTimetableIdMutationResult = NonNullable<
  AsyncReturnType<typeof putTeamsTeamIdTimetablesTimetableId>
>;

export type PutTeamsTeamIdTimetablesTimetableIdMutationError = ErrorType<unknown>;

export const usePutTeamsTeamIdTimetablesTimetableId = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof putTeamsTeamIdTimetablesTimetableId>,
    TError,
    {teamId: string; timetableId: string},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof putTeamsTeamIdTimetablesTimetableId>,
    {teamId: string; timetableId: string}
  > = props => {
    const {teamId, timetableId} = props || {};

    return putTeamsTeamIdTimetablesTimetableId(teamId, timetableId);
  };

  return useMutation<
    AsyncReturnType<typeof putTeamsTeamIdTimetablesTimetableId>,
    TError,
    {teamId: string; timetableId: string},
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤„ÅÆ‰∏ÄË¶ß„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ

 * @summary ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤‰∏ÄË¶ßÂèñÂæó
 */
export const getTeamsTeamIdTimetables = (teamId: string, params?: GetTeamsTeamIdTimetablesParams) => {
  return backendCustomInstance<TimetableOfDay[]>({url: `/teams/${teamId}/timetables`, method: 'get', params});
};

export const getGetTeamsTeamIdTimetablesQueryKey = (teamId: string, params?: GetTeamsTeamIdTimetablesParams) => [
  `/teams/${teamId}/timetables`,
  ...(params ? [params] : []),
];

export type GetTeamsTeamIdTimetablesQueryResult = NonNullable<AsyncReturnType<typeof getTeamsTeamIdTimetables>>;
export type GetTeamsTeamIdTimetablesQueryError = ErrorType<unknown>;

export const useGetTeamsTeamIdTimetables = <
  TData = AsyncReturnType<typeof getTeamsTeamIdTimetables>,
  TError = ErrorType<unknown>,
>(
  teamId: string,
  params?: GetTeamsTeamIdTimetablesParams,
  options?: {query?: UseQueryOptions<AsyncReturnType<typeof getTeamsTeamIdTimetables>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTeamsTeamIdTimetablesQueryKey(teamId, params);

  const queryFn: QueryFunction<AsyncReturnType<typeof getTeamsTeamIdTimetables>> = () =>
    getTeamsTeamIdTimetables(teamId, params);

  const query = useQuery<AsyncReturnType<typeof getTeamsTeamIdTimetables>, TError, TData>(queryKey, queryFn, {
    enabled: !!teamId,
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

/**
 * ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ
 * @summary ÂΩìÊó•„ÅÆÊôÇÈñìÂâ≤ÁôªÈå≤
 */
export const postTeamsTeamIdTimetables = (teamId: string, timetableOfDayInput: TimetableOfDayInput) => {
  return backendCustomInstance<TimetableOfDay>({
    url: `/teams/${teamId}/timetables`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: timetableOfDayInput,
  });
};

export type PostTeamsTeamIdTimetablesMutationResult = NonNullable<AsyncReturnType<typeof postTeamsTeamIdTimetables>>;
export type PostTeamsTeamIdTimetablesMutationBody = TimetableOfDayInput;
export type PostTeamsTeamIdTimetablesMutationError = ErrorType<unknown>;

export const usePostTeamsTeamIdTimetables = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof postTeamsTeamIdTimetables>,
    TError,
    {teamId: string; data: TimetableOfDayInput},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof postTeamsTeamIdTimetables>,
    {teamId: string; data: TimetableOfDayInput}
  > = props => {
    const {teamId, data} = props || {};

    return postTeamsTeamIdTimetables(teamId, data);
  };

  return useMutation<
    AsyncReturnType<typeof postTeamsTeamIdTimetables>,
    TError,
    {teamId: string; data: TimetableOfDayInput},
    TContext
  >(mutationFn, mutationOptions);
};
