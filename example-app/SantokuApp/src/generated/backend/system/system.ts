/**
 * Generated by orval v6.6.1 üç∫
 * Do not edit manually.
 * SantokuApp REST API
 * SantokuApp„ÅÆREST API„ÄÇ
 * OpenAPI spec version: 1.0.0
 */
import {useQuery, UseQueryOptions, QueryFunction, UseQueryResult, QueryKey} from 'react-query';
import type {CsrfTokenResponse} from '.././model';
import {backendCustomInstance, ErrorType} from '../../../framework/backend/customInstance';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;

/**
 * CSRF„Éà„Éº„ÇØ„É≥„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ
 * @summary CSRF„Éà„Éº„ÇØ„É≥„ÅÆÂèñÂæó
 */
export const getCsrfToken = () => {
  return backendCustomInstance<CsrfTokenResponse>({url: `/csrf_token`, method: 'get'});
};

export const getGetCsrfTokenQueryKey = () => [`/csrf_token`];

export const useGetCsrfToken = <TData = AsyncReturnType<typeof getCsrfToken>, TError = ErrorType<unknown>>(options?: {
  query?: UseQueryOptions<AsyncReturnType<typeof getCsrfToken>, TError, TData>;
}): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetCsrfTokenQueryKey();

  const queryFn: QueryFunction<AsyncReturnType<typeof getCsrfToken>> = () => getCsrfToken();

  const query = useQuery<AsyncReturnType<typeof getCsrfToken>, TError, TData>(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};
