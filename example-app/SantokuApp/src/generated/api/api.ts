/* tslint:disable */
/* eslint-disable */
/**
 * SantokuApp REST API
 * SantokuAppのREST API。
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * アカウント
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * アカウントID
     * @type {string}
     * @memberof Account
     */
    'accountId': string;
    /**
     * 
     * @type {Profile}
     * @memberof Account
     */
    'profile'?: Profile;
    /**
     * デフォルトのチームID
     * @type {string}
     * @memberof Account
     */
    'defaultTeamId'?: string;
    /**
     * 参加済みチームID一覧
     * @type {Array<string>}
     * @memberof Account
     */
    'joinedTeamIdList'?: Array<string>;
    /**
     * アカウントに紐づくデバイストークン（デバイストークンの更新期限を超過しているものは除く）
     * @type {Array<string>}
     * @memberof Account
     */
    'deviceTokens': Array<string>;
}
/**
 * アカウント削除
 * @export
 * @interface AccountDeletion
 */
export interface AccountDeletion {
    /**
     * パスワード
     * @type {string}
     * @memberof AccountDeletion
     */
    'password'?: string;
}
/**
 * アカウント紐づくデバイストークン
 * @export
 * @interface AccountDeviceTokens
 */
export interface AccountDeviceTokens {
    /**
     * アカウントに紐づくデバイストークン（デバイストークンの更新期限を超過しているものは除く）
     * @type {Array<string>}
     * @memberof AccountDeviceTokens
     */
    'deviceTokens': Array<string>;
}
/**
 * アカウントチーム情報
 * @export
 * @interface AccountJoinedTeam
 */
export interface AccountJoinedTeam {
    /**
     * デフォルトのチームID
     * @type {string}
     * @memberof AccountJoinedTeam
     */
    'defaultTeamId'?: string;
    /**
     * 参加済みチームID一覧
     * @type {Array<string>}
     * @memberof AccountJoinedTeam
     */
    'joinedTeamIdList'?: Array<string>;
}
/**
 * アカウントのログイン情報
 * @export
 * @interface AccountLogin
 */
export interface AccountLogin {
    /**
     * アカウントID
     * @type {string}
     * @memberof AccountLogin
     */
    'accountId'?: string;
    /**
     * パスワード
     * @type {string}
     * @memberof AccountLogin
     */
    'password'?: string;
}
/**
 * アカウントのログイン結果
 * @export
 * @interface AccountLoginResponse
 */
export interface AccountLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof AccountLoginResponse
     */
    'status': AccountLoginResponseStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AccountLoginResponseStatusEnum {
    Complete = 'COMPLETE'
}

/**
 * アカウントプロフィール情報
 * @export
 * @interface AccountProfile
 */
export interface AccountProfile {
    /**
     * アカウントID
     * @type {string}
     * @memberof AccountProfile
     */
    'accountId': string;
    /**
     * 
     * @type {Profile}
     * @memberof AccountProfile
     */
    'profile'?: Profile;
}
/**
 * アカウントの登録情報
 * @export
 * @interface AccountRegistration
 */
export interface AccountRegistration {
    /**
     * アカウントのニックネーム
     * @type {string}
     * @memberof AccountRegistration
     */
    'nickname'?: string;
    /**
     * パスワード
     * @type {string}
     * @memberof AccountRegistration
     */
    'password'?: string;
}
/**
 * 登録・更新するデバイス登録トークン
 * @export
 * @interface AddDeviceToken
 */
export interface AddDeviceToken {
    /**
     * 登録・更新するデバイス登録トークン
     * @type {string}
     * @memberof AddDeviceToken
     */
    'deviceToken'?: string;
}
/**
 * アバター画像
 * @export
 * @interface AvatarImage
 */
export interface AvatarImage {
    /**
     * アバター画像
     * @type {any}
     * @memberof AvatarImage
     */
    'avatarImage'?: any;
}
/**
 * CSRFトークンレスポンス
 * @export
 * @interface CsrfTokenResponse
 */
export interface CsrfTokenResponse {
    /**
     * トークンの値
     * @type {string}
     * @memberof CsrfTokenResponse
     */
    'csrfTokenValue': string;
    /**
     * トークンのヘッダー名
     * @type {string}
     * @memberof CsrfTokenResponse
     */
    'csrfTokenHeaderName': string;
    /**
     * トークンのパラメータ名
     * @type {string}
     * @memberof CsrfTokenResponse
     */
    'csrfTokenParameterName': string;
}
/**
 * エラーレスポンス
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * エラーコード
     * @type {string}
     * @memberof ErrorResponse
     */
    'code': string;
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ErrorResponse
     */
    'message': string;
}
/**
 * 時間割のコマ
 * @export
 * @interface Period
 */
export interface Period {
    /**
     * コマ名
     * @type {string}
     * @memberof Period
     */
    'timeBoxName'?: string;
    /**
     * 開始時間
     * @type {string}
     * @memberof Period
     */
    'startTime'?: string;
    /**
     * 終了時間
     * @type {string}
     * @memberof Period
     */
    'endTime'?: string;
}
/**
 * コマテンプレートモデル
 * @export
 * @interface PeriodTemplate
 */
export interface PeriodTemplate {
    /**
     * コマ名
     * @type {string}
     * @memberof PeriodTemplate
     */
    'timeBoxName'?: string;
    /**
     * 開始時間
     * @type {string}
     * @memberof PeriodTemplate
     */
    'startTime'?: string;
    /**
     * 終了時間
     * @type {string}
     * @memberof PeriodTemplate
     */
    'endTime'?: string;
}
/**
 * プロフィール情報
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * アカウントのニックネーム
     * @type {string}
     * @memberof Profile
     */
    'nickname'?: string;
    /**
     * アカウントのアバター画像のURL
     * @type {string}
     * @memberof Profile
     */
    'avatarImageUrl'?: string;
}
/**
 * 削除するデバイス登録トークン
 * @export
 * @interface RemoveDeviceToken
 */
export interface RemoveDeviceToken {
    /**
     * 削除するデバイス登録トークン
     * @type {string}
     * @memberof RemoveDeviceToken
     */
    'deviceToken'?: string;
}
/**
 * チーム
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * チームID
     * @type {string}
     * @memberof Team
     */
    'teamId'?: string;
    /**
     * チーム名
     * @type {string}
     * @memberof Team
     */
    'teamName'?: string;
    /**
     * チームメンバー
     * @type {Array<TeamMember>}
     * @memberof Team
     */
    'teamMemberList'?: Array<TeamMember>;
}
/**
 * チーム招待
 * @export
 * @interface TeamInvitation
 */
export interface TeamInvitation {
    /**
     * 招待コード
     * @type {string}
     * @memberof TeamInvitation
     */
    'invitationCode'?: string;
    /**
     * 有効期限
     * @type {string}
     * @memberof TeamInvitation
     */
    'expirationDate'?: string;
}
/**
 * チームメンバー
 * @export
 * @interface TeamMember
 */
export interface TeamMember {
    /**
     * チームメンバー権限
     * @type {string}
     * @memberof TeamMember
     */
    'teamMemberAuthority'?: string;
    /**
     * アカウントID
     * @type {string}
     * @memberof TeamMember
     */
    'accountId': string;
    /**
     * 
     * @type {Profile}
     * @memberof TeamMember
     */
    'profile'?: Profile;
}
/**
 * 利用規約
 * @export
 * @interface TermsOfService
 */
export interface TermsOfService {
    /**
     * 最新の利用規約のバージョン
     * @type {string}
     * @memberof TermsOfService
     */
    'latestTermsOfServiceVersion'?: string;
    /**
     * 利用規約のURL
     * @type {string}
     * @memberof TermsOfService
     */
    'url'?: string;
}
/**
 * 利用規約同意状態
 * @export
 * @interface TermsOfServiceAgreementStatus
 */
export interface TermsOfServiceAgreementStatus {
    /**
     * 有効な利用規約に同意済みかどうか
     * @type {boolean}
     * @memberof TermsOfServiceAgreementStatus
     */
    'hasAgreedValidTermsOfService'?: boolean;
    /**
     * 同意した利用規約のバージョン
     * @type {string}
     * @memberof TermsOfServiceAgreementStatus
     */
    'agreedTermsOfServiceVersion'?: string;
}
/**
 * 当日の時間割
 * @export
 * @interface TimetableOfDay
 */
export interface TimetableOfDay {
    /**
     * 時間割ID
     * @type {string}
     * @memberof TimetableOfDay
     */
    'timetableId'?: string;
    /**
     * 時間割名
     * @type {string}
     * @memberof TimetableOfDay
     */
    'timetableName'?: string;
    /**
     * 当日日付
     * @type {string}
     * @memberof TimetableOfDay
     */
    'timetableDate'?: string;
    /**
     * 時間割開始日時
     * @type {string}
     * @memberof TimetableOfDay
     */
    'timetableStartedAt'?: string;
    /**
     * コマ一覧
     * @type {Array<Period>}
     * @memberof TimetableOfDay
     */
    'periodList'?: Array<Period>;
}
/**
 * 当日時間割登録のインプット
 * @export
 * @interface TimetableOfDayInput
 */
export interface TimetableOfDayInput {
    /**
     * 時間割テンプレートID
     * @type {string}
     * @memberof TimetableOfDayInput
     */
    'timetableTemplateId'?: string;
    /**
     * 当日日付
     * @type {string}
     * @memberof TimetableOfDayInput
     */
    'timatebleDate'?: string;
}
/**
 * 時間割テンプレートモデル
 * @export
 * @interface TimetableTemplate
 */
export interface TimetableTemplate {
    /**
     * 時間割テンプレートID
     * @type {string}
     * @memberof TimetableTemplate
     */
    'timetableTemplateId'?: string;
    /**
     * 時間割テンプレート名
     * @type {string}
     * @memberof TimetableTemplate
     */
    'timetableTemplateName'?: string;
    /**
     * コマテンプレート一覧
     * @type {Array<PeriodTemplate>}
     * @memberof TimetableTemplate
     */
    'periodTemplateList'?: Array<PeriodTemplate>;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ログイン済みアカウントを削除します。  アカウントの削除にパスワードを要求するので、DELETEメソッドではなくPOSTメソッドを利用しています。  参考: [4.3.5. DELETE - RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.5)  > A payload within a DELETE request message has no defined semantics; > sending a payload body on a DELETE request might cause some existing > implementations to reject the request. 
         * @summary ログイン済みアカウント削除
         * @param {AccountDeletion} [accountDeletion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountsMeDelete: async (accountDeletion?: AccountDeletion, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/me/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountDeletion, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウントIDをキーとして登録されているアカウントを取得する。 
         * @summary アカウントの取得
         * @param {string} accountId アカウントのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsAccountId: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccountsAccountId', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アバターを取得する。 
         * @summary アバターを取得する
         * @param {string} accountId アカウントのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsAccountIdAvatar: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccountsAccountIdAvatar', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}/avatar`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン済みのアカウントを取得する。 
         * @summary ログイン済みアカウントの取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン済みアカウントのアバターを取得する。 
         * @summary ログイン済みアカウントのアバターを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsMeAvatar: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/me/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン済みアカウントの有効な利用規約に同意しているかの状態を取得します。 
         * @summary ログイン済みアカウントの利用規約同意状態確認
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsMeTerms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/me/terms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン済みアカウントのデバイス登録トークンを登録・更新する。 
         * @summary ログイン済みアカウントのデバイス登録トークンの登録・更新
         * @param {AddDeviceToken} [addDeviceToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountsMeDeviceTokenAdd: async (addDeviceToken?: AddDeviceToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/me/device-token/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addDeviceToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン済みアカウントのデバイス登録トークンを削除する。 
         * @summary ログイン済みアカウントのデバイス登録トークンの削除
         * @param {RemoveDeviceToken} [removeDeviceToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountsMeDeviceTokenRemove: async (removeDeviceToken?: RemoveDeviceToken, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/me/device-token/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeDeviceToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン済みアカウントにおいて、指定された利用規約のバージョンに同意します。 
         * @summary ログイン済みアカウントの利用規約同意
         * @param {TermsOfServiceAgreementStatus} [termsOfServiceAgreementStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountsMeTerms: async (termsOfServiceAgreementStatus?: TermsOfServiceAgreementStatus, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/me/terms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(termsOfServiceAgreementStatus, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウントIDとパスワードを指定してログインします。 
         * @summary ログインする
         * @param {AccountLogin} [accountLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin: async (accountLogin?: AccountLogin, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountLogin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ログアウトする
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アカウントを登録します。アカウントの登録には、ニックネームとパスワードが必要です。 
         * @summary アカウントの登録
         * @param {AccountRegistration} [accountRegistration] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSignup: async (accountRegistration?: AccountRegistration, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountRegistration, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログイン済みアカウントのアバターを登録する。 
         * @summary ログイン済みアカウントのアバターを登録する
         * @param {any} [avatarImage] アバター画像
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAccountsMeAvatar: async (avatarImage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accounts/me/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Session required


            if (avatarImage !== undefined) { 
                localVarFormParams.append('avatarImage', avatarImage as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * ログイン済みアカウントを削除します。  アカウントの削除にパスワードを要求するので、DELETEメソッドではなくPOSTメソッドを利用しています。  参考: [4.3.5. DELETE - RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.5)  > A payload within a DELETE request message has no defined semantics; > sending a payload body on a DELETE request might cause some existing > implementations to reject the request. 
         * @summary ログイン済みアカウント削除
         * @param {AccountDeletion} [accountDeletion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountsMeDelete(accountDeletion?: AccountDeletion, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccountsMeDelete(accountDeletion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウントIDをキーとして登録されているアカウントを取得する。 
         * @summary アカウントの取得
         * @param {string} accountId アカウントのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsAccountId(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountsAccountId(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アバターを取得する。 
         * @summary アバターを取得する
         * @param {string} accountId アカウントのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsAccountIdAvatar(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvatarImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountsAccountIdAvatar(accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ログイン済みのアカウントを取得する。 
         * @summary ログイン済みアカウントの取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountsMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ログイン済みアカウントのアバターを取得する。 
         * @summary ログイン済みアカウントのアバターを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsMeAvatar(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvatarImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountsMeAvatar(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ログイン済みアカウントの有効な利用規約に同意しているかの状態を取得します。 
         * @summary ログイン済みアカウントの利用規約同意状態確認
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountsMeTerms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsOfServiceAgreementStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountsMeTerms(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ログイン済みアカウントのデバイス登録トークンを登録・更新する。 
         * @summary ログイン済みアカウントのデバイス登録トークンの登録・更新
         * @param {AddDeviceToken} [addDeviceToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountsMeDeviceTokenAdd(addDeviceToken?: AddDeviceToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAccountsMeDeviceTokenAdd(addDeviceToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ログイン済みアカウントのデバイス登録トークンを削除する。 
         * @summary ログイン済みアカウントのデバイス登録トークンの削除
         * @param {RemoveDeviceToken} [removeDeviceToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountsMeDeviceTokenRemove(removeDeviceToken?: RemoveDeviceToken, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAccountsMeDeviceTokenRemove(removeDeviceToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ログイン済みアカウントにおいて、指定された利用規約のバージョンに同意します。 
         * @summary ログイン済みアカウントの利用規約同意
         * @param {TermsOfServiceAgreementStatus} [termsOfServiceAgreementStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAccountsMeTerms(termsOfServiceAgreementStatus?: TermsOfServiceAgreementStatus, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsOfServiceAgreementStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAccountsMeTerms(termsOfServiceAgreementStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウントIDとパスワードを指定してログインします。 
         * @summary ログインする
         * @param {AccountLogin} [accountLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogin(accountLogin?: AccountLogin, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogin(accountLogin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ログアウトする
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * アカウントを登録します。アカウントの登録には、ニックネームとパスワードが必要です。 
         * @summary アカウントの登録
         * @param {AccountRegistration} [accountRegistration] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSignup(accountRegistration?: AccountRegistration, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSignup(accountRegistration, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ログイン済みアカウントのアバターを登録する。 
         * @summary ログイン済みアカウントのアバターを登録する
         * @param {any} [avatarImage] アバター画像
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAccountsMeAvatar(avatarImage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAccountsMeAvatar(avatarImage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * ログイン済みアカウントを削除します。  アカウントの削除にパスワードを要求するので、DELETEメソッドではなくPOSTメソッドを利用しています。  参考: [4.3.5. DELETE - RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.5)  > A payload within a DELETE request message has no defined semantics; > sending a payload body on a DELETE request might cause some existing > implementations to reject the request. 
         * @summary ログイン済みアカウント削除
         * @param {AccountDeletion} [accountDeletion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountsMeDelete(accountDeletion?: AccountDeletion, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAccountsMeDelete(accountDeletion, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウントIDをキーとして登録されているアカウントを取得する。 
         * @summary アカウントの取得
         * @param {string} accountId アカウントのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsAccountId(accountId: string, options?: any): AxiosPromise<Account> {
            return localVarFp.getAccountsAccountId(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * アバターを取得する。 
         * @summary アバターを取得する
         * @param {string} accountId アカウントのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsAccountIdAvatar(accountId: string, options?: any): AxiosPromise<AvatarImage> {
            return localVarFp.getAccountsAccountIdAvatar(accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン済みのアカウントを取得する。 
         * @summary ログイン済みアカウントの取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsMe(options?: any): AxiosPromise<Account> {
            return localVarFp.getAccountsMe(options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン済みアカウントのアバターを取得する。 
         * @summary ログイン済みアカウントのアバターを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsMeAvatar(options?: any): AxiosPromise<AvatarImage> {
            return localVarFp.getAccountsMeAvatar(options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン済みアカウントの有効な利用規約に同意しているかの状態を取得します。 
         * @summary ログイン済みアカウントの利用規約同意状態確認
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountsMeTerms(options?: any): AxiosPromise<TermsOfServiceAgreementStatus> {
            return localVarFp.getAccountsMeTerms(options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン済みアカウントのデバイス登録トークンを登録・更新する。 
         * @summary ログイン済みアカウントのデバイス登録トークンの登録・更新
         * @param {AddDeviceToken} [addDeviceToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountsMeDeviceTokenAdd(addDeviceToken?: AddDeviceToken, options?: any): AxiosPromise<void> {
            return localVarFp.postAccountsMeDeviceTokenAdd(addDeviceToken, options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン済みアカウントのデバイス登録トークンを削除する。 
         * @summary ログイン済みアカウントのデバイス登録トークンの削除
         * @param {RemoveDeviceToken} [removeDeviceToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountsMeDeviceTokenRemove(removeDeviceToken?: RemoveDeviceToken, options?: any): AxiosPromise<void> {
            return localVarFp.postAccountsMeDeviceTokenRemove(removeDeviceToken, options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン済みアカウントにおいて、指定された利用規約のバージョンに同意します。 
         * @summary ログイン済みアカウントの利用規約同意
         * @param {TermsOfServiceAgreementStatus} [termsOfServiceAgreementStatus] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAccountsMeTerms(termsOfServiceAgreementStatus?: TermsOfServiceAgreementStatus, options?: any): AxiosPromise<TermsOfServiceAgreementStatus> {
            return localVarFp.postAccountsMeTerms(termsOfServiceAgreementStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * アカウントIDとパスワードを指定してログインします。 
         * @summary ログインする
         * @param {AccountLogin} [accountLogin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin(accountLogin?: AccountLogin, options?: any): AxiosPromise<AccountLoginResponse> {
            return localVarFp.postLogin(accountLogin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ログアウトする
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogout(options?: any): AxiosPromise<void> {
            return localVarFp.postLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * アカウントを登録します。アカウントの登録には、ニックネームとパスワードが必要です。 
         * @summary アカウントの登録
         * @param {AccountRegistration} [accountRegistration] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSignup(accountRegistration?: AccountRegistration, options?: any): AxiosPromise<Account> {
            return localVarFp.postSignup(accountRegistration, options).then((request) => request(axios, basePath));
        },
        /**
         * ログイン済みアカウントのアバターを登録する。 
         * @summary ログイン済みアカウントのアバターを登録する
         * @param {any} [avatarImage] アバター画像
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAccountsMeAvatar(avatarImage?: any, options?: any): AxiosPromise<void> {
            return localVarFp.putAccountsMeAvatar(avatarImage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * ログイン済みアカウントを削除します。  アカウントの削除にパスワードを要求するので、DELETEメソッドではなくPOSTメソッドを利用しています。  参考: [4.3.5. DELETE - RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.5)  > A payload within a DELETE request message has no defined semantics; > sending a payload body on a DELETE request might cause some existing > implementations to reject the request. 
     * @summary ログイン済みアカウント削除
     * @param {AccountDeletion} [accountDeletion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public deleteAccountsMeDelete(accountDeletion?: AccountDeletion, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).deleteAccountsMeDelete(accountDeletion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウントIDをキーとして登録されているアカウントを取得する。 
     * @summary アカウントの取得
     * @param {string} accountId アカウントのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getAccountsAccountId(accountId: string, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getAccountsAccountId(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アバターを取得する。 
     * @summary アバターを取得する
     * @param {string} accountId アカウントのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getAccountsAccountIdAvatar(accountId: string, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getAccountsAccountIdAvatar(accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン済みのアカウントを取得する。 
     * @summary ログイン済みアカウントの取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getAccountsMe(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getAccountsMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン済みアカウントのアバターを取得する。 
     * @summary ログイン済みアカウントのアバターを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getAccountsMeAvatar(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getAccountsMeAvatar(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン済みアカウントの有効な利用規約に同意しているかの状態を取得します。 
     * @summary ログイン済みアカウントの利用規約同意状態確認
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getAccountsMeTerms(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).getAccountsMeTerms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン済みアカウントのデバイス登録トークンを登録・更新する。 
     * @summary ログイン済みアカウントのデバイス登録トークンの登録・更新
     * @param {AddDeviceToken} [addDeviceToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public postAccountsMeDeviceTokenAdd(addDeviceToken?: AddDeviceToken, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).postAccountsMeDeviceTokenAdd(addDeviceToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン済みアカウントのデバイス登録トークンを削除する。 
     * @summary ログイン済みアカウントのデバイス登録トークンの削除
     * @param {RemoveDeviceToken} [removeDeviceToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public postAccountsMeDeviceTokenRemove(removeDeviceToken?: RemoveDeviceToken, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).postAccountsMeDeviceTokenRemove(removeDeviceToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン済みアカウントにおいて、指定された利用規約のバージョンに同意します。 
     * @summary ログイン済みアカウントの利用規約同意
     * @param {TermsOfServiceAgreementStatus} [termsOfServiceAgreementStatus] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public postAccountsMeTerms(termsOfServiceAgreementStatus?: TermsOfServiceAgreementStatus, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).postAccountsMeTerms(termsOfServiceAgreementStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウントIDとパスワードを指定してログインします。 
     * @summary ログインする
     * @param {AccountLogin} [accountLogin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public postLogin(accountLogin?: AccountLogin, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).postLogin(accountLogin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ログアウトする
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public postLogout(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).postLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アカウントを登録します。アカウントの登録には、ニックネームとパスワードが必要です。 
     * @summary アカウントの登録
     * @param {AccountRegistration} [accountRegistration] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public postSignup(accountRegistration?: AccountRegistration, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).postSignup(accountRegistration, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログイン済みアカウントのアバターを登録する。 
     * @summary ログイン済みアカウントのアバターを登録する
     * @param {any} [avatarImage] アバター画像
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public putAccountsMeAvatar(avatarImage?: any, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).putAccountsMeAvatar(avatarImage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * CSRFトークンを取得します。
         * @summary CSRFトークンの取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCsrfToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/csrf_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * CSRFトークンを取得します。
         * @summary CSRFトークンの取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCsrfToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CsrfTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCsrfToken(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * CSRFトークンを取得します。
         * @summary CSRFトークンの取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCsrfToken(options?: any): AxiosPromise<CsrfTokenResponse> {
            return localVarFp.getCsrfToken(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * CSRFトークンを取得します。
     * @summary CSRFトークンの取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public getCsrfToken(options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).getCsrfToken(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * チームを登録します。チームを作成したアカウントは 特権ユーザとして登録されます。 
         * @summary チーム登録
         * @param {Team} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeams: async (team?: Team, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(team, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チームIDを指定して、チームを取得します。 
         * @summary チーム取得
         * @param {string} teamId チームのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsTeamId: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTeamsTeamId', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 時間割テンプレートの一覧を取得します。 
         * @summary 時間割テンプレート一覧取得
         * @param {string} teamId チームのID
         * @param {string} [sort] ソート
         * @param {number} [limit] 1ページの上限件数
         * @param {number} [page] 取得するページ番号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsTeamIdTimetableTemplates: async (teamId: string, sort?: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTeamsTeamIdTimetableTemplates', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}/timetable-templates`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 時間割テンプレートを取得します。 
         * @summary 時間割テンプレート取得
         * @param {string} teamId チームのID
         * @param {string} templateId テンプレートのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsTeamIdTimetableTemplatesTemplateId: async (teamId: string, templateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTeamsTeamIdTimetableTemplatesTemplateId', 'teamId', teamId)
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('getTeamsTeamIdTimetableTemplatesTemplateId', 'templateId', templateId)
            const localVarPath = `/teams/{teamId}/timetable-templates/{templateId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 当日の時間割の一覧を取得します。 
         * @summary 当日の時間割一覧取得
         * @param {string} teamId チームID
         * @param {number} [limit] 上限件数
         * @param {string} [sort] ソート
         * @param {number} [since] 検索対象日付From
         * @param {string} [until] 検索対象日付To
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsTeamIdTimetables: async (teamId: string, limit?: number, sort?: string, since?: number, until?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTeamsTeamIdTimetables', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}/timetables`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 当日の時間割を取得します。 
         * @summary 当日の時間割取得
         * @param {string} teamId チームID
         * @param {string} timetableId 時間割ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsTeamIdTimetablesTimetableId: async (teamId: string, timetableId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('getTeamsTeamIdTimetablesTimetableId', 'teamId', teamId)
            // verify required parameter 'timetableId' is not null or undefined
            assertParamExists('getTeamsTeamIdTimetablesTimetableId', 'timetableId', timetableId)
            const localVarPath = `/teams/{teamId}/timetables/{timetableId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"timetableId"}}`, encodeURIComponent(String(timetableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チームの参加に必要な招待コードを発行します。 
         * @summary 招待コード発行
         * @param {string} teamId チームのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamsTeamIdInvitationCode: async (teamId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('postTeamsTeamIdInvitationCode', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}/invitation-code`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チームに参加します。 
         * @summary チーム参加
         * @param {string} teamId チームのID
         * @param {TeamInvitation} [teamInvitation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamsTeamIdJoin: async (teamId: string, teamInvitation?: TeamInvitation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('postTeamsTeamIdJoin', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}/join`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamInvitation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 時間割テンプレートを登録します。 
         * @summary 時間割テンプレート登録
         * @param {string} teamId チームのID
         * @param {TimetableTemplate} [timetableTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamsTeamIdTimetableTemplates: async (teamId: string, timetableTemplate?: TimetableTemplate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('postTeamsTeamIdTimetableTemplates', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}/timetable-templates`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timetableTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 当日の時間割を登録します。
         * @summary 当日の時間割登録
         * @param {string} teamId チームID
         * @param {TimetableOfDayInput} [timetableOfDayInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamsTeamIdTimetables: async (teamId: string, timetableOfDayInput?: TimetableOfDayInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('postTeamsTeamIdTimetables', 'teamId', teamId)
            const localVarPath = `/teams/{teamId}/timetables`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timetableOfDayInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 時間割テンプレートを更新します。 
         * @summary 時間割テンプレート更新
         * @param {string} teamId チームのID
         * @param {string} templateId テンプレートのID
         * @param {TimetableTemplate} [timetableTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeamsTeamIdTimetableTemplatesTemplateId: async (teamId: string, templateId: string, timetableTemplate?: TimetableTemplate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('putTeamsTeamIdTimetableTemplatesTemplateId', 'teamId', teamId)
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('putTeamsTeamIdTimetableTemplatesTemplateId', 'templateId', templateId)
            const localVarPath = `/teams/{teamId}/timetable-templates/{templateId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timetableTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 今日の時間割を開始します。チームメンバーに今日の時間割の開始を通知します。
         * @summary 今日の時間割開始
         * @param {string} teamId チームID
         * @param {string} timetableId 時間割ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeamsTeamIdTimetablesTimetableId: async (teamId: string, timetableId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamId' is not null or undefined
            assertParamExists('putTeamsTeamIdTimetablesTimetableId', 'teamId', teamId)
            // verify required parameter 'timetableId' is not null or undefined
            assertParamExists('putTeamsTeamIdTimetablesTimetableId', 'timetableId', timetableId)
            const localVarPath = `/teams/{teamId}/timetables/{timetableId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)))
                .replace(`{${"timetableId"}}`, encodeURIComponent(String(timetableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Session required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamApiAxiosParamCreator(configuration)
    return {
        /**
         * チームを登録します。チームを作成したアカウントは 特権ユーザとして登録されます。 
         * @summary チーム登録
         * @param {Team} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeams(team?: Team, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeams(team, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * チームIDを指定して、チームを取得します。 
         * @summary チーム取得
         * @param {string} teamId チームのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsTeamId(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamsTeamId(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 時間割テンプレートの一覧を取得します。 
         * @summary 時間割テンプレート一覧取得
         * @param {string} teamId チームのID
         * @param {string} [sort] ソート
         * @param {number} [limit] 1ページの上限件数
         * @param {number} [page] 取得するページ番号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsTeamIdTimetableTemplates(teamId: string, sort?: string, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimetableTemplate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamsTeamIdTimetableTemplates(teamId, sort, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 時間割テンプレートを取得します。 
         * @summary 時間割テンプレート取得
         * @param {string} teamId チームのID
         * @param {string} templateId テンプレートのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsTeamIdTimetableTemplatesTemplateId(teamId: string, templateId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimetableTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamsTeamIdTimetableTemplatesTemplateId(teamId, templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 当日の時間割の一覧を取得します。 
         * @summary 当日の時間割一覧取得
         * @param {string} teamId チームID
         * @param {number} [limit] 上限件数
         * @param {string} [sort] ソート
         * @param {number} [since] 検索対象日付From
         * @param {string} [until] 検索対象日付To
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsTeamIdTimetables(teamId: string, limit?: number, sort?: string, since?: number, until?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimetableOfDay>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamsTeamIdTimetables(teamId, limit, sort, since, until, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 当日の時間割を取得します。 
         * @summary 当日の時間割取得
         * @param {string} teamId チームID
         * @param {string} timetableId 時間割ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsTeamIdTimetablesTimetableId(teamId: string, timetableId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimetableOfDay>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamsTeamIdTimetablesTimetableId(teamId, timetableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * チームの参加に必要な招待コードを発行します。 
         * @summary 招待コード発行
         * @param {string} teamId チームのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTeamsTeamIdInvitationCode(teamId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamInvitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTeamsTeamIdInvitationCode(teamId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * チームに参加します。 
         * @summary チーム参加
         * @param {string} teamId チームのID
         * @param {TeamInvitation} [teamInvitation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTeamsTeamIdJoin(teamId: string, teamInvitation?: TeamInvitation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTeamsTeamIdJoin(teamId, teamInvitation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 時間割テンプレートを登録します。 
         * @summary 時間割テンプレート登録
         * @param {string} teamId チームのID
         * @param {TimetableTemplate} [timetableTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTeamsTeamIdTimetableTemplates(teamId: string, timetableTemplate?: TimetableTemplate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimetableTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTeamsTeamIdTimetableTemplates(teamId, timetableTemplate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 当日の時間割を登録します。
         * @summary 当日の時間割登録
         * @param {string} teamId チームID
         * @param {TimetableOfDayInput} [timetableOfDayInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTeamsTeamIdTimetables(teamId: string, timetableOfDayInput?: TimetableOfDayInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimetableOfDay>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTeamsTeamIdTimetables(teamId, timetableOfDayInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 時間割テンプレートを更新します。 
         * @summary 時間割テンプレート更新
         * @param {string} teamId チームのID
         * @param {string} templateId テンプレートのID
         * @param {TimetableTemplate} [timetableTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTeamsTeamIdTimetableTemplatesTemplateId(teamId: string, templateId: string, timetableTemplate?: TimetableTemplate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimetableTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTeamsTeamIdTimetableTemplatesTemplateId(teamId, templateId, timetableTemplate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 今日の時間割を開始します。チームメンバーに今日の時間割の開始を通知します。
         * @summary 今日の時間割開始
         * @param {string} teamId チームID
         * @param {string} timetableId 時間割ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTeamsTeamIdTimetablesTimetableId(teamId: string, timetableId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimetableOfDay>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTeamsTeamIdTimetablesTimetableId(teamId, timetableId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamApiFp(configuration)
    return {
        /**
         * チームを登録します。チームを作成したアカウントは 特権ユーザとして登録されます。 
         * @summary チーム登録
         * @param {Team} [team] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeams(team?: Team, options?: any): AxiosPromise<Team> {
            return localVarFp.getTeams(team, options).then((request) => request(axios, basePath));
        },
        /**
         * チームIDを指定して、チームを取得します。 
         * @summary チーム取得
         * @param {string} teamId チームのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsTeamId(teamId: string, options?: any): AxiosPromise<Team> {
            return localVarFp.getTeamsTeamId(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 時間割テンプレートの一覧を取得します。 
         * @summary 時間割テンプレート一覧取得
         * @param {string} teamId チームのID
         * @param {string} [sort] ソート
         * @param {number} [limit] 1ページの上限件数
         * @param {number} [page] 取得するページ番号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsTeamIdTimetableTemplates(teamId: string, sort?: string, limit?: number, page?: number, options?: any): AxiosPromise<Array<TimetableTemplate>> {
            return localVarFp.getTeamsTeamIdTimetableTemplates(teamId, sort, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 時間割テンプレートを取得します。 
         * @summary 時間割テンプレート取得
         * @param {string} teamId チームのID
         * @param {string} templateId テンプレートのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsTeamIdTimetableTemplatesTemplateId(teamId: string, templateId: string, options?: any): AxiosPromise<TimetableTemplate> {
            return localVarFp.getTeamsTeamIdTimetableTemplatesTemplateId(teamId, templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 当日の時間割の一覧を取得します。 
         * @summary 当日の時間割一覧取得
         * @param {string} teamId チームID
         * @param {number} [limit] 上限件数
         * @param {string} [sort] ソート
         * @param {number} [since] 検索対象日付From
         * @param {string} [until] 検索対象日付To
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsTeamIdTimetables(teamId: string, limit?: number, sort?: string, since?: number, until?: string, options?: any): AxiosPromise<Array<TimetableOfDay>> {
            return localVarFp.getTeamsTeamIdTimetables(teamId, limit, sort, since, until, options).then((request) => request(axios, basePath));
        },
        /**
         * 当日の時間割を取得します。 
         * @summary 当日の時間割取得
         * @param {string} teamId チームID
         * @param {string} timetableId 時間割ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsTeamIdTimetablesTimetableId(teamId: string, timetableId: string, options?: any): AxiosPromise<TimetableOfDay> {
            return localVarFp.getTeamsTeamIdTimetablesTimetableId(teamId, timetableId, options).then((request) => request(axios, basePath));
        },
        /**
         * チームの参加に必要な招待コードを発行します。 
         * @summary 招待コード発行
         * @param {string} teamId チームのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamsTeamIdInvitationCode(teamId: string, options?: any): AxiosPromise<TeamInvitation> {
            return localVarFp.postTeamsTeamIdInvitationCode(teamId, options).then((request) => request(axios, basePath));
        },
        /**
         * チームに参加します。 
         * @summary チーム参加
         * @param {string} teamId チームのID
         * @param {TeamInvitation} [teamInvitation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamsTeamIdJoin(teamId: string, teamInvitation?: TeamInvitation, options?: any): AxiosPromise<Team> {
            return localVarFp.postTeamsTeamIdJoin(teamId, teamInvitation, options).then((request) => request(axios, basePath));
        },
        /**
         * 時間割テンプレートを登録します。 
         * @summary 時間割テンプレート登録
         * @param {string} teamId チームのID
         * @param {TimetableTemplate} [timetableTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamsTeamIdTimetableTemplates(teamId: string, timetableTemplate?: TimetableTemplate, options?: any): AxiosPromise<TimetableTemplate> {
            return localVarFp.postTeamsTeamIdTimetableTemplates(teamId, timetableTemplate, options).then((request) => request(axios, basePath));
        },
        /**
         * 当日の時間割を登録します。
         * @summary 当日の時間割登録
         * @param {string} teamId チームID
         * @param {TimetableOfDayInput} [timetableOfDayInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeamsTeamIdTimetables(teamId: string, timetableOfDayInput?: TimetableOfDayInput, options?: any): AxiosPromise<TimetableOfDay> {
            return localVarFp.postTeamsTeamIdTimetables(teamId, timetableOfDayInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 時間割テンプレートを更新します。 
         * @summary 時間割テンプレート更新
         * @param {string} teamId チームのID
         * @param {string} templateId テンプレートのID
         * @param {TimetableTemplate} [timetableTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeamsTeamIdTimetableTemplatesTemplateId(teamId: string, templateId: string, timetableTemplate?: TimetableTemplate, options?: any): AxiosPromise<TimetableTemplate> {
            return localVarFp.putTeamsTeamIdTimetableTemplatesTemplateId(teamId, templateId, timetableTemplate, options).then((request) => request(axios, basePath));
        },
        /**
         * 今日の時間割を開始します。チームメンバーに今日の時間割の開始を通知します。
         * @summary 今日の時間割開始
         * @param {string} teamId チームID
         * @param {string} timetableId 時間割ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeamsTeamIdTimetablesTimetableId(teamId: string, timetableId: string, options?: any): AxiosPromise<TimetableOfDay> {
            return localVarFp.putTeamsTeamIdTimetablesTimetableId(teamId, timetableId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI {
    /**
     * チームを登録します。チームを作成したアカウントは 特権ユーザとして登録されます。 
     * @summary チーム登録
     * @param {Team} [team] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeams(team?: Team, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).getTeams(team, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チームIDを指定して、チームを取得します。 
     * @summary チーム取得
     * @param {string} teamId チームのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeamsTeamId(teamId: string, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).getTeamsTeamId(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 時間割テンプレートの一覧を取得します。 
     * @summary 時間割テンプレート一覧取得
     * @param {string} teamId チームのID
     * @param {string} [sort] ソート
     * @param {number} [limit] 1ページの上限件数
     * @param {number} [page] 取得するページ番号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeamsTeamIdTimetableTemplates(teamId: string, sort?: string, limit?: number, page?: number, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).getTeamsTeamIdTimetableTemplates(teamId, sort, limit, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 時間割テンプレートを取得します。 
     * @summary 時間割テンプレート取得
     * @param {string} teamId チームのID
     * @param {string} templateId テンプレートのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeamsTeamIdTimetableTemplatesTemplateId(teamId: string, templateId: string, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).getTeamsTeamIdTimetableTemplatesTemplateId(teamId, templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 当日の時間割の一覧を取得します。 
     * @summary 当日の時間割一覧取得
     * @param {string} teamId チームID
     * @param {number} [limit] 上限件数
     * @param {string} [sort] ソート
     * @param {number} [since] 検索対象日付From
     * @param {string} [until] 検索対象日付To
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeamsTeamIdTimetables(teamId: string, limit?: number, sort?: string, since?: number, until?: string, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).getTeamsTeamIdTimetables(teamId, limit, sort, since, until, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 当日の時間割を取得します。 
     * @summary 当日の時間割取得
     * @param {string} teamId チームID
     * @param {string} timetableId 時間割ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeamsTeamIdTimetablesTimetableId(teamId: string, timetableId: string, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).getTeamsTeamIdTimetablesTimetableId(teamId, timetableId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チームの参加に必要な招待コードを発行します。 
     * @summary 招待コード発行
     * @param {string} teamId チームのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public postTeamsTeamIdInvitationCode(teamId: string, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).postTeamsTeamIdInvitationCode(teamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * チームに参加します。 
     * @summary チーム参加
     * @param {string} teamId チームのID
     * @param {TeamInvitation} [teamInvitation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public postTeamsTeamIdJoin(teamId: string, teamInvitation?: TeamInvitation, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).postTeamsTeamIdJoin(teamId, teamInvitation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 時間割テンプレートを登録します。 
     * @summary 時間割テンプレート登録
     * @param {string} teamId チームのID
     * @param {TimetableTemplate} [timetableTemplate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public postTeamsTeamIdTimetableTemplates(teamId: string, timetableTemplate?: TimetableTemplate, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).postTeamsTeamIdTimetableTemplates(teamId, timetableTemplate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 当日の時間割を登録します。
     * @summary 当日の時間割登録
     * @param {string} teamId チームID
     * @param {TimetableOfDayInput} [timetableOfDayInput] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public postTeamsTeamIdTimetables(teamId: string, timetableOfDayInput?: TimetableOfDayInput, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).postTeamsTeamIdTimetables(teamId, timetableOfDayInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 時間割テンプレートを更新します。 
     * @summary 時間割テンプレート更新
     * @param {string} teamId チームのID
     * @param {string} templateId テンプレートのID
     * @param {TimetableTemplate} [timetableTemplate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public putTeamsTeamIdTimetableTemplatesTemplateId(teamId: string, templateId: string, timetableTemplate?: TimetableTemplate, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).putTeamsTeamIdTimetableTemplatesTemplateId(teamId, templateId, timetableTemplate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 今日の時間割を開始します。チームメンバーに今日の時間割の開始を通知します。
     * @summary 今日の時間割開始
     * @param {string} teamId チームID
     * @param {string} timetableId 時間割ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public putTeamsTeamIdTimetablesTimetableId(teamId: string, timetableId: string, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).putTeamsTeamIdTimetablesTimetableId(teamId, timetableId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TermsApi - axios parameter creator
 * @export
 */
export const TermsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 有効な利用規約を取得します。このAPIの呼び出しには認証情報は不要です。 
         * @summary 有効な利用規約の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/terms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TermsApi - functional programming interface
 * @export
 */
export const TermsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TermsApiAxiosParamCreator(configuration)
    return {
        /**
         * 有効な利用規約を取得します。このAPIの呼び出しには認証情報は不要です。 
         * @summary 有効な利用規約の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTerms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsOfService>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTerms(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TermsApi - factory interface
 * @export
 */
export const TermsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TermsApiFp(configuration)
    return {
        /**
         * 有効な利用規約を取得します。このAPIの呼び出しには認証情報は不要です。 
         * @summary 有効な利用規約の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTerms(options?: any): AxiosPromise<TermsOfService> {
            return localVarFp.getTerms(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TermsApi - object-oriented interface
 * @export
 * @class TermsApi
 * @extends {BaseAPI}
 */
export class TermsApi extends BaseAPI {
    /**
     * 有効な利用規約を取得します。このAPIの呼び出しには認証情報は不要です。 
     * @summary 有効な利用規約の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermsApi
     */
    public getTerms(options?: AxiosRequestConfig) {
        return TermsApiFp(this.configuration).getTerms(options).then((request) => request(this.axios, this.basePath));
    }
}


