/**
 * Generated by orval v6.7.1 üç∫
 * Do not edit manually.
 * SantokuApp Sandbox REST API
 * SantokuApp Sandbox REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useInfiniteQuery,
  useMutation,
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from 'react-query';
import type {
  ListTodoResponse,
  BadRequestResponse,
  ListTodoParams,
  Todo,
  TodoRegistration,
  ListTodoInfiniteResponse,
  ListTodoByCursorParams,
  NotFoundResponse,
} from './model';
import {sandboxCustomInstance, ErrorType} from '../../framework/backend/customInstance';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;

/**
 * List todo
 * @summary List todo
 */
export const listTodo = (params?: ListTodoParams) => {
  return sandboxCustomInstance<ListTodoResponse>({url: `/todos`, method: 'get', params});
};

export const getListTodoQueryKey = (params?: ListTodoParams) => [`/todos`, ...(params ? [params] : [])];

export type ListTodoQueryResult = NonNullable<AsyncReturnType<typeof listTodo>>;
export type ListTodoQueryError = ErrorType<BadRequestResponse>;

export const useListTodo = <TData = AsyncReturnType<typeof listTodo>, TError = ErrorType<BadRequestResponse>>(
  params?: ListTodoParams,
  options?: {query?: UseQueryOptions<AsyncReturnType<typeof listTodo>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getListTodoQueryKey(params);

  const queryFn: QueryFunction<AsyncReturnType<typeof listTodo>> = () => listTodo(params);

  const query = useQuery<AsyncReturnType<typeof listTodo>, TError, TData>(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * Create todo
 * @summary Create todo
 */
export const postTodo = (todoRegistration: TodoRegistration) => {
  return sandboxCustomInstance<Todo>({
    url: `/todos`,
    method: 'post',
    headers: {'Content-Type': 'application/json'},
    data: todoRegistration,
  });
};

export type PostTodoMutationResult = NonNullable<AsyncReturnType<typeof postTodo>>;
export type PostTodoMutationBody = TodoRegistration;
export type PostTodoMutationError = ErrorType<BadRequestResponse>;

export const usePostTodo = <TError = ErrorType<BadRequestResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<typeof postTodo>, TError, {data: TodoRegistration}, TContext>;
}) => {
  const {mutation: mutationOptions} = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof postTodo>, {data: TodoRegistration}> = props => {
    const {data} = props || {};

    return postTodo(data);
  };

  return useMutation<AsyncReturnType<typeof postTodo>, TError, {data: TodoRegistration}, TContext>(
    mutationFn,
    mutationOptions,
  );
};

/**
 * List todo by cursor
 * @summary List todo by cursor
 */
export const listTodoByCursor = (params?: ListTodoByCursorParams) => {
  return sandboxCustomInstance<ListTodoInfiniteResponse>({url: `/todos/infinite`, method: 'get', params});
};

export const getListTodoByCursorQueryKey = (params?: ListTodoByCursorParams) => [
  `/todos/infinite`,
  ...(params ? [params] : []),
];

export type ListTodoByCursorInfiniteQueryResult = NonNullable<AsyncReturnType<typeof listTodoByCursor>>;
export type ListTodoByCursorInfiniteQueryError = ErrorType<BadRequestResponse>;

export const useListTodoByCursorInfinite = <
  TData = AsyncReturnType<typeof listTodoByCursor>,
  TError = ErrorType<BadRequestResponse>,
>(
  params?: ListTodoByCursorParams,
  options?: {query?: UseInfiniteQueryOptions<AsyncReturnType<typeof listTodoByCursor>, TError, TData>},
): UseInfiniteQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getListTodoByCursorQueryKey(params);

  const queryFn: QueryFunction<AsyncReturnType<typeof listTodoByCursor>> = ({pageParam}) =>
    listTodoByCursor({cursor: pageParam, ...params});

  const query = useInfiniteQuery<AsyncReturnType<typeof listTodoByCursor>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  );

  return {
    queryKey,
    ...query,
  };
};

/**
 * Get todo
 * @summary Get todo
 */
export const getTodo = (todoId: number) => {
  return sandboxCustomInstance<Todo>({url: `/todos/${todoId}`, method: 'get'});
};

export const getGetTodoQueryKey = (todoId: number) => [`/todos/${todoId}`];

export type GetTodoQueryResult = NonNullable<AsyncReturnType<typeof getTodo>>;
export type GetTodoQueryError = ErrorType<NotFoundResponse>;

export const useGetTodo = <TData = AsyncReturnType<typeof getTodo>, TError = ErrorType<NotFoundResponse>>(
  todoId: number,
  options?: {query?: UseQueryOptions<AsyncReturnType<typeof getTodo>, TError, TData>},
): UseQueryResult<TData, TError> & {queryKey: QueryKey} => {
  const {query: queryOptions} = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTodoQueryKey(todoId);

  const queryFn: QueryFunction<AsyncReturnType<typeof getTodo>> = () => getTodo(todoId);

  const query = useQuery<AsyncReturnType<typeof getTodo>, TError, TData>(queryKey, queryFn, {
    enabled: !!todoId,
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

/**
 * Update todo
 * @summary Update todo
 */
export const putTodo = (todoId: number, todoRegistration: TodoRegistration) => {
  return sandboxCustomInstance<Todo>({
    url: `/todos/${todoId}`,
    method: 'put',
    headers: {'Content-Type': 'application/json'},
    data: todoRegistration,
  });
};

export type PutTodoMutationResult = NonNullable<AsyncReturnType<typeof putTodo>>;
export type PutTodoMutationBody = TodoRegistration;
export type PutTodoMutationError = ErrorType<BadRequestResponse | NotFoundResponse>;

export const usePutTodo = <TError = ErrorType<BadRequestResponse | NotFoundResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    AsyncReturnType<typeof putTodo>,
    TError,
    {todoId: number; data: TodoRegistration},
    TContext
  >;
}) => {
  const {mutation: mutationOptions} = options || {};

  const mutationFn: MutationFunction<
    AsyncReturnType<typeof putTodo>,
    {todoId: number; data: TodoRegistration}
  > = props => {
    const {todoId, data} = props || {};

    return putTodo(todoId, data);
  };

  return useMutation<AsyncReturnType<typeof putTodo>, TError, {todoId: number; data: TodoRegistration}, TContext>(
    mutationFn,
    mutationOptions,
  );
};

/**
 * Delete todo
 * @summary Delete todo
 */
export const deleteTodo = (todoId: number) => {
  return sandboxCustomInstance<void>({url: `/todos/${todoId}`, method: 'delete'});
};

export type DeleteTodoMutationResult = NonNullable<AsyncReturnType<typeof deleteTodo>>;

export type DeleteTodoMutationError = ErrorType<NotFoundResponse>;

export const useDeleteTodo = <TError = ErrorType<NotFoundResponse>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<AsyncReturnType<typeof deleteTodo>, TError, {todoId: number}, TContext>;
}) => {
  const {mutation: mutationOptions} = options || {};

  const mutationFn: MutationFunction<AsyncReturnType<typeof deleteTodo>, {todoId: number}> = props => {
    const {todoId} = props || {};

    return deleteTodo(todoId);
  };

  return useMutation<AsyncReturnType<typeof deleteTodo>, TError, {todoId: number}, TContext>(
    mutationFn,
    mutationOptions,
  );
};
